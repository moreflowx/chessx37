(()=>{"use strict";var e={521:e=>{e.exports=require("readline")}},s={};function t(i){var n=s[i];if(void 0!==n)return n.exports;var o=s[i]={exports:{}};return e[i](o,o.exports,t),o.exports}t.n=e=>{var s=e&&e.__esModule?()=>e.default:()=>e;return t.d(s,{a:s}),s},t.d=(e,s)=>{for(var i in s)t.o(s,i)&&!t.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:s[i]})},t.o=(e,s)=>Object.prototype.hasOwnProperty.call(e,s),(()=>{var e;!function(e){e[e.a8=0]="a8",e[e.b8=1]="b8",e[e.c8=2]="c8",e[e.d8=3]="d8",e[e.e8=4]="e8",e[e.f8=5]="f8",e[e.g8=6]="g8",e[e.h8=7]="h8",e[e.a7=8]="a7",e[e.b7=9]="b7",e[e.c7=10]="c7",e[e.d7=11]="d7",e[e.e7=12]="e7",e[e.f7=13]="f7",e[e.g7=14]="g7",e[e.h7=15]="h7",e[e.a6=16]="a6",e[e.b6=17]="b6",e[e.c6=18]="c6",e[e.d6=19]="d6",e[e.e6=20]="e6",e[e.f6=21]="f6",e[e.g6=22]="g6",e[e.h6=23]="h6",e[e.a5=24]="a5",e[e.b5=25]="b5",e[e.c5=26]="c5",e[e.d5=27]="d5",e[e.e5=28]="e5",e[e.f5=29]="f5",e[e.g5=30]="g5",e[e.h5=31]="h5",e[e.a4=32]="a4",e[e.b4=33]="b4",e[e.c4=34]="c4",e[e.d4=35]="d4",e[e.e4=36]="e4",e[e.f4=37]="f4",e[e.g4=38]="g4",e[e.h4=39]="h4",e[e.a3=40]="a3",e[e.b3=41]="b3",e[e.c3=42]="c3",e[e.d3=43]="d3",e[e.e3=44]="e3",e[e.f3=45]="f3",e[e.g3=46]="g3",e[e.h3=47]="h3",e[e.a2=48]="a2",e[e.b2=49]="b2",e[e.c2=50]="c2",e[e.d2=51]="d2",e[e.e2=52]="e2",e[e.f2=53]="f2",e[e.g2=54]="g2",e[e.h2=55]="h2",e[e.a1=56]="a1",e[e.b1=57]="b1",e[e.c1=58]="c1",e[e.d1=59]="d1",e[e.e1=60]="e1",e[e.f1=61]="f1",e[e.g1=62]="g1",e[e.h1=63]="h1",e[e.no_sq=64]="no_sq"}(e||(e={}));class s{constructor(){this.name="KhepriChess",this.version="3.1.0",this.author="Kurt Peters",this.isChess960=!1,this.SquareBigInt=[0n,1n,2n,3n,4n,5n,6n,7n,8n,9n,10n,11n,12n,13n,14n,15n,16n,17n,18n,19n,20n,21n,22n,23n,24n,25n,26n,27n,28n,29n,30n,31n,32n,33n,34n,35n,36n,37n,38n,39n,40n,41n,42n,43n,44n,45n,46n,47n,48n,49n,50n,51n,52n,53n,54n,55n,56n,57n,58n,59n,60n,61n,62n,63n,64n],this.Position={PiecesBB:[],OccupanciesBB:[0n,0n],Squares:[],CastlingRights:0,SideToMove:0,EnPassSq:0,HalfMoves:0,Ply:0,Hash:0n,PawnHash:0n,Phase:0,CastlingPaths:[],CastlingRookSquares:[],CastlingSquaresMask:[]},this.PositionHistory=[],this.CharToPiece=new Map([["P",{Type:0,Color:0}],["N",{Type:1,Color:0}],["B",{Type:2,Color:0}],["R",{Type:3,Color:0}],["Q",{Type:4,Color:0}],["K",{Type:5,Color:0}],["p",{Type:0,Color:1}],["n",{Type:1,Color:1}],["b",{Type:2,Color:1}],["r",{Type:3,Color:1}],["q",{Type:4,Color:1}],["k",{Type:5,Color:1}]]),this.stateCopy=[],this.rankMasks=[],this.fileMasks=[],this.isolatedMasks=[],this.passedMasks=Array(2).fill(0).map((()=>Array(64).fill(0))),this.betweenMasks=Array(64).fill(0n).map((()=>Array(64).fill(0n))),this.attackRays=Array.from(Array(3),(()=>new Array(64).fill(0n))),this.squareBB=[],this.distanceBetween=Array(64).fill(0n).map((()=>Array(64).fill(0n))),this.notAFile=18374403900871474942n,this.notHFile=9187201950435737471n,this.notHGFile=4557430888798830399n,this.notABFile=18229723555195321596n,this.PRNG_SEED=1n,this.Zobrist={Pieces:Array.from(Array(2),(()=>Array.from(Array(6),(()=>new Array(64))))),EnPassant:[],Castle:[],SideToMove:0n},this.HashNoMove=5e4,this.TranspositionTables={Entries:[],Size:0n},this.PawnHashTable={Entries:[],Size:0n},this.PawnAttacks=Array.from(Array(2),(()=>new Array(64))),this.KnightAttacks=[],this.KingAttacks=[],this.BishopMasks=Array(64),this.BishopAttacks=Array.from(Array(64),(()=>new Array(512))),this.RookMasks=Array(64),this.RookAttacks=Array.from(Array(64),(()=>new Array(4096))),this.BishopMagicNumbers=[0x40040844404084n,0x2004208a004208n,0x10190041080202n,0x108060845042010n,0x581104180800210n,0x2112080446200010n,0x1080820820060210n,0x3c0808410220200n,0x4050404440404n,0x21001420088n,0x24d0080801082102n,0x1020a0a020400n,0x40308200402n,0x4011002100800n,0x401484104104005n,0x801010402020200n,0x400210c3880100n,0x404022024108200n,0x810018200204102n,0x4002801a02003n,0x85040820080400n,0x810102c808880400n,0xe900410884800n,0x8002020480840102n,0x220200865090201n,0x2010100a02021202n,0x152048408022401n,0x20080002081110n,0x4001001021004000n,0x800040400a011002n,0xe4004081011002n,0x1c004001012080n,0x8004200962a00220n,0x8422100208500202n,0x2000402200300c08n,0x8646020080080080n,0x80020a0200100808n,0x2010004880111000n,0x623000a080011400n,0x42008c0340209202n,0x209188240001000n,0x400408a884001800n,0x110400a6080400n,0x1840060a44020800n,0x90080104000041n,0x201011000808101n,0x1a2208080504f080n,0x8012020600211212n,0x500861011240000n,0x180806108200800n,0x4000020e01040044n,0x300000261044000an,0x802241102020002n,0x20906061210001n,0x5a84841004010310n,0x4010801011c04n,0xa010109502200n,0x4a02012000n,0x500201010098b028n,0x8040002811040900n,0x28000010020204n,0x6000020202d0240n,0x8918844842082200n,0x4010011029020020n],this.RookMagicNumbers=[0x8a80104000800020n,0x140002000100040n,0x2801880a0017001n,0x100081001000420n,0x200020010080420n,0x3001c0002010008n,0x8480008002000100n,0x2080088004402900n,0x800098204000n,0x2024401000200040n,0x100802000801000n,0x120800800801000n,0x208808088000400n,0x2802200800400n,0x2200800100020080n,0x801000060821100n,0x80044006422000n,0x100808020004000n,0x12108a0010204200n,0x140848010000802n,0x481828014002800n,0x8094004002004100n,0x4010040010010802n,0x20008806104n,0x100400080208000n,0x2040002120081000n,0x21200680100081n,0x20100080080080n,0x2000a00200410n,0x20080800400n,0x80088400100102n,0x80004600042881n,0x4040008040800020n,0x440003000200801n,0x4200011004500n,0x188020010100100n,0x14800401802800n,0x2080040080800200n,0x124080204001001n,0x200046502000484n,0x480400080088020n,0x1000422010034000n,0x30200100110040n,0x100021010009n,0x2002080100110004n,0x202008004008002n,0x20020004010100n,0x2048440040820001n,0x101002200408200n,0x40802000401080n,0x4008142004410100n,0x2060820c0120200n,0x1001004080100n,0x20c020080040080n,0x2935610830022400n,0x44440041009200n,0x280001040802101n,0x2100190040002085n,0x80c0084100102001n,0x4024081001000421n,0x20030a0244872n,0x12001008414402n,0x2006104900a0804n,0x1004081002402n],this.BishopRelevantBits=[6n,5n,5n,5n,5n,5n,5n,6n,5n,5n,5n,5n,5n,5n,5n,5n,5n,5n,7n,7n,7n,7n,5n,5n,5n,5n,7n,9n,9n,7n,5n,5n,5n,5n,7n,9n,9n,7n,5n,5n,5n,5n,7n,7n,7n,7n,5n,5n,5n,5n,5n,5n,5n,5n,5n,5n,6n,5n,5n,5n,5n,5n,5n,6n],this.RookRelevantBits=[12n,11n,11n,11n,11n,11n,11n,12n,11n,10n,10n,10n,10n,10n,10n,11n,11n,10n,10n,10n,10n,10n,10n,11n,11n,10n,10n,10n,10n,10n,10n,11n,11n,10n,10n,10n,10n,10n,10n,11n,11n,10n,10n,10n,10n,10n,10n,11n,11n,10n,10n,10n,10n,10n,10n,11n,12n,11n,11n,11n,11n,11n,11n,12n],this.MGPieceValue=[80,321,328,447,912,15e3],this.EGPieceValue=[102,256,271,472,911,15e3],this.PST=[[[0,0,0,0,0,0,0,0,24,24,16,16,9,10,7,6,0,11,12,8,13,21,10,-6,-23,4,-5,12,16,3,5,-26,-28,-13,-6,3,6,0,0,-30,-24,-13,-9,-10,0,-2,21,-15,-28,-8,-25,-17,-12,11,28,-21,0,0,0,0,0,0,0,0],[-11,-2,-1,-1,1,-4,-1,-5,-9,-4,5,4,2,4,0,-2,-6,9,3,11,14,13,12,5,2,0,-1,18,6,20,9,18,0,-1,-3,-10,3,-3,8,8,-10,-14,-10,-5,6,-2,4,-6,-5,-5,-19,-1,-3,0,-1,4,-5,-2,-6,-5,0,3,-2,-3],[-4,0,-4,-2,-1,-1,-1,-1,-8,-3,-6,-4,2,1,-2,-13,-10,0,3,5,4,11,5,4,-8,-5,2,16,7,10,-1,-3,0,3,-4,7,13,-9,-5,8,-1,11,4,-2,-1,5,7,1,6,7,8,-4,0,9,22,-1,-11,1,-1,-4,2,-5,-3,-6],[4,4,3,6,6,2,3,4,3,3,10,9,9,8,4,5,-4,6,2,8,1,7,6,2,-8,-6,1,-1,3,8,-1,1,-17,-9,-9,-6,-5,-7,1,-12,-22,-14,-12,-9,-6,-4,-2,-12,-23,-11,-12,-5,-2,1,-1,-30,-3,-7,-4,4,9,12,-20,-3],[-5,2,4,2,6,3,3,5,-13,-23,2,6,4,10,5,12,-7,-6,-2,3,12,16,17,22,-10,-11,-5,-5,7,6,9,14,-5,-13,-9,-8,-1,3,8,5,-9,-5,-2,-5,-5,5,2,4,-14,-8,3,7,8,6,-7,2,-6,-10,-4,13,-3,-13,-5,-6],[-1,0,0,0,0,0,1,0,0,2,1,2,2,2,1,0,1,3,3,3,2,6,5,1,0,2,4,3,3,4,3,-3,-3,1,3,1,1,0,-3,-9,-2,0,1,-3,-2,-6,-2,-11,-2,-1,-3,-25,-25,-13,13,14,-14,14,10,-29,7,-27,30,9]],[[0,0,0,0,0,0,0,0,50,47,35,28,25,25,31,39,35,32,22,5,2,9,22,21,8,0,-11,-27,-27,-21,-8,-10,-4,-4,-19,-26,-26,-24,-17,-19,-14,-9,-19,-17,-18,-19,-24,-26,-7,-9,-5,-11,-8,-18,-22,-26,0,0,0,0,0,0,0,0],[-10,-3,0,-3,1,-6,-4,-7,-5,3,-3,6,1,-4,-2,-5,-5,-2,2,1,1,1,1,-3,1,7,7,5,7,5,8,5,-1,0,2,9,3,3,6,-1,-3,-3,-11,2,-4,-17,-4,-2,-3,-2,-7,-5,1,-7,0,-2,-5,-13,-4,0,-2,-4,-9,-4],[-4,-2,-4,-2,-1,-2,-2,-3,-3,-1,0,-7,0,-3,-4,-7,1,-1,0,0,0,3,1,2,-2,4,4,11,5,4,-1,1,-1,-2,7,9,2,3,-3,-1,1,0,2,5,6,-3,-1,1,-3,-11,-7,-1,1,-5,-7,-4,-9,-1,-6,-2,-2,-4,-4,-5],[11,9,11,13,11,7,9,7,12,13,14,13,9,7,8,8,5,7,5,5,0,1,2,-2,-2,0,5,-2,-1,2,-2,0,-1,-2,1,-4,-6,-8,-6,-8,-8,-5,-9,-7,-11,-13,-6,-10,-7,-7,-5,-6,-9,-9,-7,-8,-10,-3,0,-7,-12,-13,-3,-21],[-5,2,4,3,6,4,2,4,-8,-5,4,7,7,7,3,4,-5,-3,0,7,11,11,7,9,-6,-1,1,8,12,6,9,8,-7,-2,3,13,8,6,6,4,-5,-8,1,-3,0,1,3,2,-7,-7,-14,-11,-9,-5,-6,-1,-6,-8,-7,-17,-5,-9,-4,-5],[-3,-2,-2,-1,0,1,2,-2,-2,6,6,6,6,12,7,0,1,12,14,12,11,23,21,3,-4,9,18,23,17,21,14,-5,-11,-4,14,20,19,15,2,-18,-13,-5,7,14,15,9,0,-16,-16,-9,2,6,10,3,-11,-25,-22,-25,-16,-15,-25,-12,-35,-44]]],this.PhaseValues=[0,1,1,2,4,0],this.MGdoubledPenalty=3,this.EGdoubledPenalty=10,this.MGisolatedPenalty=16,this.EGisolatedPenalty=4,this.MGfileSemiOpenScore=17,this.MGfileOpenScore=34,this.MGpassedBonus=[0,1,-4,-7,11,37,55,0],this.EGpassedBonus=[0,-9,-3,17,35,53,67,0],this.MGrookQueenFileBonus=11,this.MGKnightOutpostBonus=23,this.EGKnightOutpostBonus=14,this.MGBishopOutpostBonus=21,this.EGBishopOutpostBonus=0,this.MGCorneredBishopPenalty=25,this.EGCorneredBishopPenalty=40,this.MGKingSemiOpenPenalty=6,this.MGBishopPairBonus=25,this.EGBishopPairBonus=30,this.MGKnightMobility=[0,0,-23,-11,-9,0,15,0,24],this.MGBishopMobility=[0,-2,-28,-15,-8,0,5,13,17,18,21,23,11,8],this.MGRookMobility=[0,0,-31,-25,-22,-17,-14,-12,-11,-8,-1,2,10,17,16],this.MGQueenMobility=[0,0,0,0,-1,-5,-10,-11,-13,-9,-8,-8,-5,-3,-2,0,4,5,6,6,9,11,12,12,10,7,2,2],this.EGKnightMobility=[0,0,-25,-32,-18,0,-6,0,11],this.EGBishopMobility=[0,-1,-28,-29,-21,-16,-6,-1,6,8,11,10,11,10],this.EGRookMobility=[0,0,-26,-29,-19,-13,-6,-2,4,6,7,10,9,11,8],this.EGQueenMobility=[0,0,0,0,0,-1,-2,-3,-7,-8,-13,-13,-16,-15,-8,-4,-3,4,9,9,15,11,16,16,11,9,3,2],this.PhaseTotal=4*this.PhaseValues[1]+4*this.PhaseValues[2]+4*this.PhaseValues[3]+2*this.PhaseValues[4],this.KingSquares=[0,0],this.MaxPly=100,this.Checkmate=15e3,this.Inf=2e4,this.search={nodes:0,killers:Array(2).fill(0).map((()=>Array(this.MaxPly).fill(0))),history:Array(2).fill(0).map((()=>Array(64).fill(0).map((()=>Array(64).fill(0))))),bestMove:{move:0,score:-this.Inf}},this.Timer={timeleft:-1,increment:0,depth:this.MaxPly,movestogo:0,startTime:0,stopTime:0,movetime:-1,stop:!1,extended:!1},this.totalNodes=0,this.Init(),this.InitHashes(),this.SetTransTableSize()}SetBit(e,s){return e|1n<<this.SquareBigInt[s]}RemoveBit(e,s){return e&~(1n<<this.SquareBigInt[s])}GetBit(e,s){return e&1n<<this.SquareBigInt[s]}CountBits(e){const s=Number(0xffffffffn&e),t=Number(e>>32n);function i(e){return 16843009*((e=(858993459&(e-=e>>1&1431655765))+(e>>2&858993459))+(e>>4)&252645135)>>24}return i(s)+i(t)}GetLS1B(e){return e?this.CountBits((e&-e)-1n):-1}PrintBitboard(e){for(let s=0;s<8;s++){let t="";for(let i=0;i<8;i++){const n=8*s+i;i||(t+=8-s+"  "),t+=" "+(this.GetBit(e,n)?"1":"0")}console.log(`${t} \r\n`)}console.log("\r\n    a b c d e f g h"),console.log(`    Bitboard: ${e}`)}LoadFEN(s){this.Position.PiecesBB=[[0n,0n,0n,0n,0n,0n],[0n,0n,0n,0n,0n,0n]],this.Position.OccupanciesBB=[0n,0n],this.Position.CastlingRights=0,this.Position.Squares=[],this.Position.EnPassSq=e.no_sq,this.Position.Phase=this.PhaseTotal,this.Position.CastlingSquaresMask=new Array(64).fill(15);const t=s.split(" ")[0].split("");let i=0;for(let e=0;e<t.length;e++){const s=t[e];switch(s){case"p":case"n":case"b":case"r":case"q":case"k":case"P":case"N":case"B":case"R":case"Q":case"K":{const e=this.CharToPiece.get(s);this.PlacePiece(e.Type,e.Color,i),this.Position.Phase-=this.PhaseValues[e.Type],i++;break}case"1":case"2":case"3":case"4":case"4":case"5":case"6":case"7":case"8":i+=parseInt(s);break;case"/":break;default:throw new Error(`Unable to parse FEN character: ${s}`)}}this.Position.SideToMove="w"===s.split(" ")[1]?0:1;const n=s.split(" ")[2].split("");for(const s of n){const t=s.toUpperCase()===s?0:1,i=this.GetLS1B(this.Position.PiecesBB[t][5]);if(this.Position.CastlingSquaresMask[i]=0===t?12:3,"K"===s.toUpperCase()){const s=this.Position.Squares.findIndex(((e,s)=>e&&3===e.Type&&e.Color===t&&s>i));0===t?(this.Position.CastlingRights|=1,this.Position.CastlingPaths[1]=(this.betweenMasks[i][e.g1]|this.betweenMasks[s][e.f1])&~(this.Position.PiecesBB[t][5]|this.SetBit(0n,s)),this.Position.CastlingRookSquares[1]=s,this.Position.CastlingSquaresMask[s]=14):(this.Position.CastlingRights|=4,this.Position.CastlingPaths[4]=(this.betweenMasks[i][e.g8]|this.betweenMasks[s][e.f8])&~(this.Position.PiecesBB[t][5]|this.SetBit(0n,s)),this.Position.CastlingRookSquares[4]=s,this.Position.CastlingSquaresMask[s]=11)}else if("Q"===s.toUpperCase()){const s=this.Position.Squares.findIndex(((e,s)=>e&&3===e.Type&&e.Color===t&&s<i));0===t?(this.Position.CastlingRights|=2,this.Position.CastlingPaths[2]=(this.betweenMasks[i][e.c1]|this.betweenMasks[s][e.d1])&~(this.Position.PiecesBB[t][5]|this.SetBit(0n,s)),this.Position.CastlingRookSquares[2]=s,this.Position.CastlingSquaresMask[s]=13):(this.Position.CastlingRights|=8,this.Position.CastlingPaths[8]=(this.betweenMasks[i][e.c8]|this.betweenMasks[s][e.d8])&~(this.Position.PiecesBB[t][5]|this.SetBit(0n,s)),this.Position.CastlingRookSquares[8]=s,this.Position.CastlingSquaresMask[s]=7)}else if(s.toUpperCase()>="A"&&s.toUpperCase()<="H")if(s.toUpperCase().charCodeAt(0)-65>(7&i)){const s=this.Position.Squares.findIndex(((e,s)=>e&&3===e.Type&&e.Color===t&&s>i));0===t?(this.Position.CastlingRights|=1,this.Position.CastlingPaths[1]=(this.betweenMasks[i][e.g1]|this.betweenMasks[s][e.f1]|this.squareBB[e.g1]|this.squareBB[e.f1])&~(this.Position.PiecesBB[t][5]|this.SetBit(0n,s)),this.Position.CastlingRookSquares[1]=s,this.Position.CastlingSquaresMask[s]=14):(this.Position.CastlingRights|=4,this.Position.CastlingPaths[4]=(this.betweenMasks[i][e.g8]|this.betweenMasks[s][e.f8]|this.squareBB[e.g8]|this.squareBB[e.f8])&~(this.Position.PiecesBB[t][5]|this.SetBit(0n,s)),this.Position.CastlingRookSquares[4]=s,this.Position.CastlingSquaresMask[s]=11)}else if(0===t){const s=this.Position.Squares.findIndex(((e,s)=>e&&3===e.Type&&e.Color===t&&s>=56&&s<i));this.Position.CastlingRights|=2,this.Position.CastlingPaths[2]=(this.betweenMasks[i][e.c1]|this.betweenMasks[s][e.d1]|this.squareBB[e.c1]|this.squareBB[e.d1])&~(this.Position.PiecesBB[t][5]|this.SetBit(0n,s)),this.Position.CastlingRookSquares[2]=s,this.Position.CastlingSquaresMask[s]=13}else{const s=this.Position.Squares.findIndex(((e,s)=>e&&3===e.Type&&e.Color===t&&s<i));this.Position.CastlingRights|=8,this.Position.CastlingPaths[8]=(this.betweenMasks[i][e.c8]|this.betweenMasks[s][e.d8]|this.squareBB[e.c8]|this.squareBB[e.d8])&~(this.Position.PiecesBB[t][5]|this.SetBit(0n,s)),this.Position.CastlingRookSquares[8]=s,this.Position.CastlingSquaresMask[s]=7}}const o=s.split(" ")[3];if("-"!==o){const e="abcdefgh".indexOf(o.split("")[0]),s=8*(8-parseInt(o[1],10))+e;this.PawnAttacks[1^this.Position.SideToMove][s]&this.Position.PiecesBB[this.Position.SideToMove][0]&&(this.Position.EnPassSq=s)}this.Position.Ply=2*parseInt(s.split(" ")[5])||0,1===this.Position.SideToMove&&this.Position.Ply--,this.Position.HalfMoves=parseInt(s.split(" ")[4])||0;const{hash:a,pawnHash:c}=this.GenerateHashes();this.Position.Hash=a,this.Position.PawnHash=c,this.PositionHistory.length=0,this.PositionHistory[0]=this.Position.Hash,this.KingSquares[0]=0,this.KingSquares[1]=0}PrintBoard(){const s=[["♙","♘","♗","♖","♕","♔"],["♟︎","♞","♝","♜","♛","♚"]];for(let e=0;e<8;e++){let t="";for(let i=0;i<8;i++){let n=8*e+i,o=this.Position.Squares[n]??null;i||(t+=8-e+" "),t+=o?` ${s[o.Color][o.Type]}`:" . "}console.log(`${t} \r\n`)}console.log("\r\n   a  b  c  d  e  f  g  h"),console.log("Side to move: "+(0===this.Position.SideToMove?"white":"black")),console.log(`En passant: ${this.Position.EnPassSq!==e.no_sq?e[this.Position.EnPassSq]:"no"}`),console.log(`Castling rights: ${1&this.Position.CastlingRights?"K":"-"}${2&this.Position.CastlingRights?"Q":"-"}${4&this.Position.CastlingRights?"k":"-"}${8&this.Position.CastlingRights?"q":"-"}`),console.log(`Plies: ${this.Position.Ply}`)}GenerateMoves(e=!1){const s=[];let t=0xffffffffffffffffn;e?(t=this.Position.OccupanciesBB[1^this.Position.SideToMove],this.GeneratePawnAttacks(s)):(this.GeneratePawnMoves(s,t),this.GenerateCastlingMoves(s));for(let e=1;e<=5;e++){let i=this.Position.PiecesBB[this.Position.SideToMove][e];for(;i;){const n=this.GetLS1B(i);switch(e){case 1:this.GenerateKnightMoves(s,n,t);break;case 2:this.GenerateBishopMoves(s,n,t);break;case 3:this.GenerateRookMoves(s,n,t);break;case 4:this.GenerateQueenMoves(s,n,t);break;case 5:this.GenerateKingMoves(s,n,t)}i=this.RemoveBit(i,n)}}return s}GenerateEvasions(){const e=[];let s=0xffffffffffffffffn;const t=this.GetLS1B(this.Position.PiecesBB[this.Position.SideToMove][5]);let i=this.AttacksToByColor(t,1^this.Position.SideToMove);if(this.GenerateKingMoves(e,t,s),this.CountBits(i)>1)return e;s=i;const n=this.GetLS1B(i);this.Position.Squares[n].Type>=2&&(s|=this.betweenMasks[t][n]),this.GeneratePawnMoves(e,s);for(let t=1;t<5;t++){let i=this.Position.PiecesBB[this.Position.SideToMove][t];for(;i;){const n=this.GetLS1B(i);switch(t){case 1:this.GenerateKnightMoves(e,n,s);break;case 2:this.GenerateBishopMoves(e,n,s);break;case 3:this.GenerateRookMoves(e,n,s);break;case 4:this.GenerateQueenMoves(e,n,s)}i=this.RemoveBit(i,n)}}return e}GeneratePawnMoves(s,t){let i=this.Position.PiecesBB[this.Position.SideToMove][0];const n=~(this.Position.OccupanciesBB[0]|this.Position.OccupanciesBB[1]);let o=(0===this.Position.SideToMove?i>>8n:i<<8n)&n,a=o>>8n&0x000000ff00000000n&n;for(1===this.Position.SideToMove&&(a=o<<8n&0x00000000ff000000n&n),o&=t,a&=t;o;){const t=this.GetLS1B(o),i=0===this.Position.SideToMove?t+8:t-8;(0===this.Position.SideToMove?t<=e.h8:t>=e.a1)?(s.push(this.EncodeMove(i,t,1,0)),s.push(this.EncodeMove(i,t,1,1)),s.push(this.EncodeMove(i,t,1,2)),s.push(this.EncodeMove(i,t,1,3))):s.push(this.EncodeMove(i,t,0)),o=this.RemoveBit(o,t)}for(;a;){const e=this.GetLS1B(a),t=0===this.Position.SideToMove?e+16:e-16;s.push(this.EncodeMove(t,e,0)),a=this.RemoveBit(a,e)}for(;i;){const n=this.GetLS1B(i);let o=this.PawnAttacks[this.Position.SideToMove][n]&this.Position.OccupanciesBB[1^this.Position.SideToMove]&t;for(;o;){const t=this.GetLS1B(o);(0===this.Position.SideToMove?t<=e.h8:t>=e.a1)?(s.push(this.EncodeMove(n,t,1,0)),s.push(this.EncodeMove(n,t,1,1)),s.push(this.EncodeMove(n,t,1,2)),s.push(this.EncodeMove(n,t,1,3))):s.push(this.EncodeMove(n,t,0)),o=this.RemoveBit(o,t)}if(this.Position.EnPassSq!==e.no_sq){const e=this.PawnAttacks[this.Position.SideToMove][n]&1n<<this.SquareBigInt[this.Position.EnPassSq];if(e){const t=this.GetLS1B(e);s.push(this.EncodeMove(n,t,2))}}i=this.RemoveBit(i,n)}}GeneratePawnAttacks(s){let t=this.Position.PiecesBB[this.Position.SideToMove][0];for(;t;){const i=this.GetLS1B(t);let n=this.PawnAttacks[this.Position.SideToMove][i]&this.Position.OccupanciesBB[1^this.Position.SideToMove];for(;n;){const t=this.GetLS1B(n);(0===this.Position.SideToMove?t<=e.h8:t>=e.a1)?(s.push(this.EncodeMove(i,t,1,0)),s.push(this.EncodeMove(i,t,1,1)),s.push(this.EncodeMove(i,t,1,2)),s.push(this.EncodeMove(i,t,1,3))):s.push(this.EncodeMove(i,t,0)),n=this.RemoveBit(n,t)}if(this.Position.EnPassSq!==e.no_sq){const e=this.PawnAttacks[this.Position.SideToMove][i]&1n<<this.SquareBigInt[this.Position.EnPassSq];if(e){const t=this.GetLS1B(e);s.push(this.EncodeMove(i,t,2))}}t=this.RemoveBit(t,i)}}GenerateCastlingMoves(s){const t=this.GetLS1B(this.Position.PiecesBB[this.Position.SideToMove][5]);if(this.IsSquareAttacked(t,1^this.Position.SideToMove))return;const i=this.Position.OccupanciesBB[0]|this.Position.OccupanciesBB[1];if(0===this.Position.SideToMove){if(1&this.Position.CastlingRights){let n=this.betweenMasks[t][e.h1];if(0n===(this.Position.CastlingPaths[1]&i)){let e=!0;for(;e&&n;){const s=this.GetLS1B(n);n=this.RemoveBit(n,s),this.IsSquareAttacked(s,1^this.Position.SideToMove)&&(e=!1)}e&&s.push(this.EncodeMove(t,this.Position.CastlingRookSquares[1],3))}}if(2&this.Position.CastlingRights){let n=this.betweenMasks[t][e.c1];if(0n===(this.Position.CastlingPaths[2]&i)){let e=!0;for(;e&&n;){const s=this.GetLS1B(n);n=this.RemoveBit(n,s),this.IsSquareAttacked(s,1^this.Position.SideToMove)&&(e=!1)}e&&s.push(this.EncodeMove(t,this.Position.CastlingRookSquares[2],3))}}}else{if(4&this.Position.CastlingRights){let n=this.betweenMasks[t][e.h8];if(0n===(this.Position.CastlingPaths[4]&i)){let e=!0;for(;e&&n;){const s=this.GetLS1B(n);n=this.RemoveBit(n,s),this.IsSquareAttacked(s,1^this.Position.SideToMove)&&(e=!1)}e&&s.push(this.EncodeMove(t,this.Position.CastlingRookSquares[4],3))}}if(8&this.Position.CastlingRights){let n=this.betweenMasks[t][e.c8];if(0n===(this.Position.CastlingPaths[8]&i)){let e=!0;for(;e&&n;){const s=this.GetLS1B(n);n=this.RemoveBit(n,s),this.IsSquareAttacked(s,1^this.Position.SideToMove)&&(e=!1)}e&&s.push(this.EncodeMove(t,this.Position.CastlingRookSquares[8],3))}}}}GenerateKnightMoves(e,s,t){let i=this.KnightAttacks[s]&~this.Position.OccupanciesBB[this.Position.SideToMove]&t;for(;i;){const t=this.GetLS1B(i);e.push(this.EncodeMove(s,t,0)),i=this.RemoveBit(i,t)}}GenerateBishopAttacks(e,s){return e=BigInt.asUintN(64,e&this.BishopMasks[s]),e=BigInt.asUintN(64,e*this.BishopMagicNumbers[s]),e>>=64n-this.BishopRelevantBits[s],this.BishopAttacks[s][Number(e)]}GenerateBishopMoves(e,s,t){let i=this.GenerateBishopAttacks(this.Position.OccupanciesBB[0]|this.Position.OccupanciesBB[1],s)&~this.Position.OccupanciesBB[this.Position.SideToMove]&t;for(;i;){const t=this.GetLS1B(i);e.push(this.EncodeMove(s,t,0)),i=this.RemoveBit(i,t)}}GenerateRookAttacks(e,s){return e=BigInt.asUintN(64,e&this.RookMasks[s]),e=BigInt.asUintN(64,e*this.RookMagicNumbers[s]),e>>=64n-this.RookRelevantBits[s],this.RookAttacks[s][Number(e)]}GenerateRookMoves(e,s,t){let i=this.GenerateRookAttacks(this.Position.OccupanciesBB[0]|this.Position.OccupanciesBB[1],s)&~this.Position.OccupanciesBB[this.Position.SideToMove]&t;for(;i;){const t=this.GetLS1B(i);e.push(this.EncodeMove(s,t,0)),i=this.RemoveBit(i,t)}}GenerateQueenMoves(e,s,t){const i=this.Position.OccupanciesBB[0]|this.Position.OccupanciesBB[1];let n=(this.GenerateBishopAttacks(i,s)|this.GenerateRookAttacks(i,s))&~this.Position.OccupanciesBB[this.Position.SideToMove]&t;for(;n;){const t=this.GetLS1B(n);e.push(this.EncodeMove(s,t,0)),n=this.RemoveBit(n,t)}}GenerateKingMoves(e,s,t){let i=this.KingAttacks[s]&~this.Position.OccupanciesBB[this.Position.SideToMove]&t;for(;i;){const t=this.GetLS1B(i);e.push(this.EncodeMove(s,t,0)),i=this.RemoveBit(i,t)}}EncodeMove(e,s,t,i=0){return e|s<<6|t<<12|i<<14}MoveIsCapture(e){const s=(16256&e)>>12;return 3!==s&&void 0!==this.Position.Squares[(4032&e)>>6]||2===s}MoveIsPromotion(e){return(16256&e)>>12==1}IsSquareAttacked(e,s){const t=this.Position.PiecesBB[s][2],i=this.Position.PiecesBB[s][3],n=this.Position.PiecesBB[s][4];if(this.PawnAttacks[1^s][e]&this.Position.PiecesBB[s][0])return!0;if(this.KnightAttacks[e]&this.Position.PiecesBB[s][1])return!0;const o=this.Position.OccupanciesBB[0]|this.Position.OccupanciesBB[1],a=t|n;if(this.attackRays[0][e]&a&&this.GenerateBishopAttacks(o,e)&a)return!0;const c=i|n;return!!(this.attackRays[1][e]&c&&this.GenerateRookAttacks(o,e)&c)||!!(this.KingAttacks[e]&this.Position.PiecesBB[s][5])}MakeMove(s){const t=63&s,i=(4032&s)>>6,n=(16256&s)>>12,o=this.Position.Squares[t];let a=2===n?{Type:0,Color:1^this.Position.SideToMove}:this.Position.Squares[i];if(this.stateCopy.push({CastlingRights:this.Position.CastlingRights,EnPassSq:this.Position.EnPassSq,Captured:a,Hash:this.Position.Hash,PawnHash:this.Position.PawnHash,HalfMoves:this.Position.HalfMoves,Phase:this.Position.Phase}),this.Position.Ply++,this.Position.HalfMoves++,this.Position.EnPassSq!==e.no_sq&&(this.Position.Hash^=this.Zobrist.EnPassant[this.Position.EnPassSq],this.Position.EnPassSq=e.no_sq),3===n)this.DoCastle(o,t,i);else{if(void 0!==a||2===n){let e=i;2===n&&(e=0===o.Color?i+8:i-8),this.RemovePiece(a.Type,a.Color,e),this.Position.HalfMoves=0,this.Position.Hash^=this.Zobrist.Pieces[a.Color][a.Type][i],this.Position.Phase+=this.PhaseValues[a.Type],0===a.Type&&(this.Position.PawnHash^=this.Zobrist.Pieces[a.Color][a.Type][i])}if(this.MovePiece(o,t,i),this.Position.Hash^=this.Zobrist.Pieces[o.Color][o.Type][t]^this.Zobrist.Pieces[o.Color][o.Type][i],0===o.Type)if(this.Position.HalfMoves=0,this.Position.PawnHash^=this.Zobrist.Pieces[o.Color][o.Type][t]^this.Zobrist.Pieces[o.Color][o.Type][i],1===n){const e={Type:1+(s>>14),Color:o.Color};this.RemovePiece(o.Type,o.Color,i),this.PlacePiece(e.Type,e.Color,i),this.Position.Phase+=this.PhaseValues[0],this.Position.Phase-=this.PhaseValues[e.Type],this.Position.Hash^=this.Zobrist.Pieces[o.Color][o.Type][i]^this.Zobrist.Pieces[e.Color][e.Type][i],this.Position.PawnHash^=this.Zobrist.Pieces[o.Color][o.Type][i]}else 16==(i^t)&&(this.Position.EnPassSq=0===o.Color?i+8:i-8,this.Position.Hash^=this.Zobrist.EnPassant[this.Position.EnPassSq])}return this.Position.Hash^=this.Zobrist.Castle[this.Position.CastlingRights],this.Position.CastlingRights&=this.Position.CastlingSquaresMask[t]&this.Position.CastlingSquaresMask[i],this.Position.Hash^=this.Zobrist.Castle[this.Position.CastlingRights],this.Position.SideToMove^=1,this.Position.Hash^=this.Zobrist.SideToMove,this.PositionHistory[this.PositionHistory.length]=this.Position.Hash,!this.IsSquareAttacked(this.GetLS1B(this.Position.PiecesBB[1^this.Position.SideToMove][5]),this.Position.SideToMove)}UnmakeMove(e){const s=this.stateCopy.pop();this.Position.Ply--,this.PositionHistory.pop(),this.Position.CastlingRights=s.CastlingRights,this.Position.EnPassSq=s.EnPassSq,this.Position.HalfMoves=s.HalfMoves,this.Position.Phase=s.Phase,this.Position.SideToMove^=1;const t=63&e,i=(4032&e)>>6,n=(16256&e)>>12,o=this.Position.Squares[i];if(3===n)this.UndoCastle(t,i);else if(1===n)this.RemovePiece(o.Type,o.Color,i),this.PlacePiece(0,o.Color,t),s.Captured&&this.PlacePiece(s.Captured.Type,s.Captured.Color,i);else if(this.MovePiece(o,i,t),s.Captured){let e=i,t=s.Captured;2===n&&(e=0===o.Color?i+8:i-8),this.PlacePiece(t.Type,t.Color,e)}this.Position.Hash=s.Hash,this.Position.PawnHash=s.PawnHash}DoCastle(s,t,i){const n=i>t;let o=e.g1^56*s.Color,a=e.f1^56*s.Color;n||(o=e.c1^56*s.Color,a=e.d1^56*s.Color);const c=i;this.RemovePiece(3,s.Color,c),this.RemovePiece(s.Type,s.Color,t),this.PlacePiece(3,s.Color,a),this.PlacePiece(s.Type,s.Color,o),this.Position.Hash^=this.Zobrist.Pieces[s.Color][3][c]^this.Zobrist.Pieces[s.Color][3][a]}UndoCastle(s,t){const i=this.Position.SideToMove,n=t>s;let o=e.g1^56*i,a=e.f1^56*i;n||(o=e.c1^56*i,a=e.d1^56*i);const c=t;this.RemovePiece(3,i,a),this.RemovePiece(5,i,o),this.PlacePiece(3,i,c),this.PlacePiece(5,i,s)}MakeNullMove(){this.stateCopy.push({CastlingRights:this.Position.CastlingRights,EnPassSq:this.Position.EnPassSq,Hash:this.Position.Hash,HalfMoves:this.Position.HalfMoves,PawnHash:this.Position.PawnHash,Phase:this.Position.Phase}),this.Position.EnPassSq!==e.no_sq&&(this.Position.Hash^=this.Zobrist.EnPassant[this.Position.EnPassSq],this.Position.EnPassSq=e.no_sq),this.Position.HalfMoves=0,this.Position.SideToMove^=1,this.Position.Hash^=this.Zobrist.SideToMove,this.Position.Ply++}UnmakeNullMove(){const e=this.stateCopy.pop();this.Position.CastlingRights=e.CastlingRights,this.Position.EnPassSq=e.EnPassSq,this.Position.HalfMoves=e.HalfMoves,this.Position.SideToMove^=1,this.Position.Hash=e.Hash,this.Position.PawnHash=e.PawnHash,this.Position.Ply--,this.Position.Phase=e.Phase}MovePiece(e,s,t){const i=this.squareBB[s]|this.squareBB[t];this.Position.PiecesBB[e.Color][e.Type]^=i,this.Position.OccupanciesBB[e.Color]^=i,delete this.Position.Squares[s],this.Position.Squares[t]=e}RemovePiece(e,s,t){this.Position.PiecesBB[s][e]=this.RemoveBit(this.Position.PiecesBB[s][e],t),this.Position.OccupanciesBB[s]=this.RemoveBit(this.Position.OccupanciesBB[s],t),delete this.Position.Squares[t]}PlacePiece(e,s,t){this.Position.PiecesBB[s][e]=this.SetBit(this.Position.PiecesBB[s][e],t),this.Position.OccupanciesBB[s]=this.SetBit(this.Position.OccupanciesBB[s],t),this.Position.Squares[t]={Type:e,Color:s}}PrettyPrintMove(s){const t=63&s;let i=(4032&s)>>6;const n=(16256&s)>>12;3!==n||this.isChess960||(i=i>t?i-1:i+2);let o=`${e[t]}${e[i]}`;if(1===n){const e=s>>14;0===e&&(o+="n"),1===e&&(o+="b"),2===e&&(o+="r"),3===e&&(o+="q")}return o}Init(){const s=-1n,t=0x0001010101010100n,i=0x0040201008040200n,n=0x0002040810204080n;let o,a,c,h;for(let f=e.a8;f<=e.h1;f++){this.squareBB[f]=this.SetBit(0n,f),this.rankMasks[f]=0xffn<<(56n&BigInt(f)),this.fileMasks[f]=0x0101010101010101n<<(7n&BigInt(f)),this.isolatedMasks[f]=this.fileMasks[f]<<1n|this.fileMasks[f]>>1n,this.PawnAttacks[0][f]=this.MaskPawnAttacks(0,f),this.PawnAttacks[1][f]=this.MaskPawnAttacks(1,f),this.KnightAttacks[f]=this.MaskKnightAttacks(f),this.KingAttacks[f]=this.MaskKingAttacks(f),this.BishopMasks[f]=this.GenerateBishopMasks(f);let e=this.CountBits(this.BishopMasks[f]),r=1<<e;for(let s=0;s<r;s++){const t=this.SetOccupancy(s,e,this.BishopMasks[f]),i=BigInt.asUintN(64,t*this.BishopMagicNumbers[f])>>64n-this.BishopRelevantBits[f];this.BishopAttacks[f][Number(i)]=this.GenerateBishopAttacksFly(f,t)}this.RookMasks[f]=this.GenerateRookMasks(f),e=this.CountBits(this.RookMasks[f]),r=1<<e;for(let s=0;s<r;s++){const t=this.SetOccupancy(s,e,this.RookMasks[f]),i=BigInt.asUintN(64,t*this.RookMagicNumbers[f])>>64n-this.RookRelevantBits[f];this.RookAttacks[f][Number(i)]=this.GenerateRookAttacksFly(f,t)}this.attackRays[0][f]=this.GenerateBishopAttacks(0n,f),this.attackRays[2][f]|=this.attackRays[0][f],this.attackRays[1][f]=this.GenerateRookAttacks(0n,f),this.attackRays[2][f]|=this.attackRays[1][f];let d=this.fileMasks[f]|(this.fileMasks[f]&this.notAFile)>>1n|(this.fileMasks[f]&this.notHFile)<<1n;this.passedMasks[0][f]=d,this.passedMasks[1][56^f]=d;for(let e=0;e<64;e++){const r=f>>3,d=e>>3,b=7&f,x=7&e;this.distanceBetween[f][e]=Math.max(Math.abs(d-r),Math.abs(x-b)),o=s<<BigInt(f)^s<<BigInt(e),h=(7n&BigInt(e))-(7n&BigInt(f)),c=(7n|BigInt(e))-BigInt(f)>>3n,a=(7n&h)-1n&t,a+=2n*((7n&c)-1n>>58n),a+=(c-h&15n)-1n&i,a+=(c+h&15n)-1n&n,a*=o&-o,this.betweenMasks[f][e]=BigInt.asUintN(64,a&o)}}for(let s=e.a8;s<=e.h1;s++){for(let t=s;t<=e.h1;t+=8)this.passedMasks[0][s]&=~this.rankMasks[t];for(let t=s;t>=e.a8;t-=8)this.passedMasks[1][56^s]&=~this.rankMasks[t]}}MaskPawnAttacks(e,s){let t=0n,i=0n;return i=this.SetBit(i,s),e?(i<<7n&this.notHFile&&(t|=i<<7n),i<<9n&this.notAFile&&(t|=i<<9n)):(i>>7n&this.notAFile&&(t|=i>>7n),i>>9n&this.notHFile&&(t|=i>>9n)),BigInt.asUintN(64,t)}MaskKnightAttacks(e){let s=0n,t=0n;return t=this.SetBit(t,e),t>>17n&this.notHFile&&(s|=t>>17n),t>>15n&this.notAFile&&(s|=t>>15n),t>>10n&this.notHGFile&&(s|=t>>10n),t>>6n&this.notABFile&&(s|=t>>6n),t<<17n&this.notAFile&&(s|=t<<17n),t<<15n&this.notHFile&&(s|=t<<15n),t<<10n&this.notABFile&&(s|=t<<10n),t<<6n&this.notHGFile&&(s|=t<<6n),BigInt.asUintN(64,s)}GenerateBishopMasks(e){let s=0n;const t=Math.floor(e/8),i=e%8;for(let e=t+1,n=i+1;e<=6&&n<=6;e++,n++)s|=1n<<8n*BigInt(e)+BigInt(n);for(let e=t-1,n=i+1;e>=1&&n<=6;e--,n++)s|=1n<<8n*BigInt(e)+BigInt(n);for(let e=t+1,n=i-1;e<=6&&n>=1;e++,n--)s|=1n<<8n*BigInt(e)+BigInt(n);for(let e=t-1,n=i-1;e>=1&&n>=1;e--,n--)s|=1n<<8n*BigInt(e)+BigInt(n);return BigInt.asUintN(64,s)}GenerateBishopAttacksFly(e,s){let t=0n;const i=Math.floor(e/8),n=e%8;for(let e=i+1,o=n+1;e<=7&&o<=7&&(t|=1n<<8n*BigInt(e)+BigInt(o),!(1n<<8n*BigInt(e)+BigInt(o)&s));e++,o++);for(let e=i-1,o=n+1;e>=0&&o<=7&&(t|=1n<<8n*BigInt(e)+BigInt(o),!(1n<<8n*BigInt(e)+BigInt(o)&s));e--,o++);for(let e=i+1,o=n-1;e<=7&&o>=0&&(t|=1n<<8n*BigInt(e)+BigInt(o),!(1n<<8n*BigInt(e)+BigInt(o)&s));e++,o--);for(let e=i-1,o=n-1;e>=0&&o>=0&&(t|=1n<<8n*BigInt(e)+BigInt(o),!(1n<<8n*BigInt(e)+BigInt(o)&s));e--,o--);return BigInt.asUintN(64,t)}GenerateRookMasks(e){let s=0n;const t=Math.floor(e/8),i=e%8;for(let e=t+1;e<=6;e++)s|=1n<<8n*BigInt(e)+BigInt(i);for(let e=t-1;e>=1;e--)s|=1n<<8n*BigInt(e)+BigInt(i);for(let e=i+1;e<=6;e++)s|=1n<<8n*BigInt(t)+BigInt(e);for(let e=i-1;e>=1;e--)s|=1n<<8n*BigInt(t)+BigInt(e);return BigInt.asUintN(64,s)}GenerateRookAttacksFly(e,s){let t=0n;const i=Math.floor(e/8),n=e%8;for(let e=i+1;e<=7&&(t|=1n<<8n*BigInt(e)+BigInt(n),!(1n<<8n*BigInt(e)+BigInt(n)&s));e++);for(let e=i-1;e>=0&&(t|=1n<<8n*BigInt(e)+BigInt(n),!(1n<<8n*BigInt(e)+BigInt(n)&s));e--);for(let e=n+1;e<=7&&(t|=1n<<8n*BigInt(i)+BigInt(e),!(1n<<8n*BigInt(i)+BigInt(e)&s));e++);for(let e=n-1;e>=0&&(t|=1n<<8n*BigInt(i)+BigInt(e),!(1n<<8n*BigInt(i)+BigInt(e)&s));e--);return BigInt.asUintN(64,t)}MaskKingAttacks(e){let s=0n,t=0n;return t=this.SetBit(t,e),t>>8n&&(s|=t>>8n),t>>9n&this.notHFile&&(s|=t>>9n),t>>7n&this.notAFile&&(s|=t>>7n),t>>1n&this.notHFile&&(s|=t>>1n),t<<8n&&(s|=t<<8n),t<<9n&this.notAFile&&(s|=t<<9n),t<<7n&this.notHFile&&(s|=t<<7n),t<<1n&this.notAFile&&(s|=t<<1n),BigInt.asUintN(64,s)}SetOccupancy(e,s,t){let i=0n;for(let n=0;n<s;n++){const s=this.GetLS1B(t);t=this.RemoveBit(t,s),e&1<<n&&(i|=1n<<this.SquareBigInt[s])}return BigInt.asUintN(64,i)}Random64(){let e=this.PRNG_SEED;return e^=e>>12n,e^=e<<25n,e^=e>>27n,this.PRNG_SEED=e,BigInt.asUintN(64,2685821657736338717n*e)}InitHashes(){for(let s=0;s<=5;s++)for(let t=e.a8;t<=e.h1;t++)this.Zobrist.Pieces[0][s][t]=this.Random64(),this.Zobrist.Pieces[1][s][t]=this.Random64();for(let s=e.a8;s<=e.h1;s++)this.Zobrist.EnPassant[s]=this.Random64();for(let e=0;e<16;e++)this.Zobrist.Castle[e]=this.Random64();this.Zobrist.SideToMove=this.Random64()}GenerateHashes(){let s=0n,t=0n;for(let i=e.a8;i<=e.h1;i++){const e=this.Position.Squares[i];e&&(s^=this.Zobrist.Pieces[e.Color][e.Type][i],0===e.Type&&(t^=this.Zobrist.Pieces[e.Color][0][i]))}return this.Position.EnPassSq!==e.no_sq&&(s^=this.Zobrist.EnPassant[this.Position.EnPassSq]),s^=this.Zobrist.Castle[this.Position.CastlingRights],1===this.Position.SideToMove&&(s^=this.Zobrist.SideToMove),{hash:s,pawnHash:t}}SetTransTableSize(e=32){this.TranspositionTables.Size=BigInt(1024*e*1024/16),this.TranspositionTables.Entries.length=0,this.PawnHashTable.Size=BigInt(65536),this.PawnHashTable.Entries.length=0}WriteTT(e,s,t,i){const n=Number(this.Position.Hash%this.TranspositionTables.Size);t>this.Checkmate&&(t+=this.Position.Ply),t<-this.Checkmate&&(t-=this.Position.Ply),this.TranspositionTables.Entries[n]={BestMove:i,Depth:e,Flag:s,Hash:this.Position.Hash,Score:t}}ProbeTT(e,s,t){const i=this.TranspositionTables.Entries[Number(this.Position.Hash%this.TranspositionTables.Size)];let n=this.HashNoMove;if(!i||i.Hash!==this.Position.Hash)return{ttScore:n,ttMove:0};if(i.Depth>=e){let e=i.Score;e>this.Checkmate&&(e-=this.Position.Ply),e<-this.Checkmate&&(e+=this.Position.Ply),0===i.Flag&&(n=e),1===i.Flag&&e<=s&&(n=e),2===i.Flag&&e>=t&&(n=e)}return{ttScore:n,ttMove:i.BestMove}}Evaluate(){let s=[0,0],t=[0,0],i=this.Position.Phase;const n=[0,0],o=this.Position.OccupanciesBB[0]|this.Position.OccupanciesBB[1];let a=o&~(this.Position.PiecesBB[0][0]|this.Position.PiecesBB[1][0]);const c=this.PawnHashTable.Entries[Number(this.Position.PawnHash%this.PawnHashTable.Size)];if(c&&c.hash===this.Position.PawnHash)s[0]+=c.wScore.mg,t[0]+=c.wScore.eg,s[1]+=c.bScore.mg,t[1]+=c.bScore.eg;else{const e=this.EvaluatePawns();s[0]+=e.mgScores[0],t[0]+=e.egScores[0],s[1]+=e.mgScores[1],t[1]+=e.egScores[1],this.PawnHashTable.Entries[Number(this.Position.PawnHash%this.PawnHashTable.Size)]={hash:this.Position.PawnHash,wScore:{mg:e.mgScores[0],eg:e.egScores[0]},bScore:{mg:e.mgScores[1],eg:e.egScores[1]}}}const h=[this.rankMasks[e.a4]|this.rankMasks[e.a5]|this.rankMasks[e.a6],this.rankMasks[e.a3]|this.rankMasks[e.a4]|this.rankMasks[e.a5]];for(;a;){let i=this.GetLS1B(a),c=i;a=this.RemoveBit(a,i);const f=this.Position.Squares[i];switch(1===f.Color&&(i^=56),s[f.Color]+=this.PST[0][f.Type][i]+this.MGPieceValue[f.Type],t[f.Color]+=this.PST[1][f.Type][i]+this.EGPieceValue[f.Type],f.Type){case 1:{h[f.Color]&this.squareBB[c]&&0n===(this.passedMasks[f.Color][c]&~this.fileMasks[c]&this.Position.PiecesBB[1^f.Color][0])&&this.PawnAttacks[1^f.Color][c]&this.Position.PiecesBB[f.Color][0]&&(s[f.Color]+=this.MGKnightOutpostBonus,t[f.Color]+=this.EGKnightOutpostBonus);const e=this.KnightAttacks[c],i=this.CountBits(e);s[f.Color]+=this.MGKnightMobility[i],t[f.Color]+=this.EGKnightMobility[i];break}case 2:{n[f.Color]++;const a=this.GenerateBishopAttacks(o,c),r=this.CountBits(a);if(s[f.Color]+=this.MGBishopMobility[r],t[f.Color]+=this.EGBishopMobility[r],h[f.Color]&this.squareBB[c]&&0n===(this.passedMasks[f.Color][c]&~this.fileMasks[c]&this.Position.PiecesBB[1^f.Color][0])&&this.PawnAttacks[1^f.Color][c]&this.Position.PiecesBB[f.Color][0]&&(s[f.Color]+=this.MGBishopOutpostBonus,t[f.Color]+=this.EGBishopOutpostBonus),this.isChess960&&(i===e.a1||i===e.h1)){let e=0==(7&i)?1n<<49n:1n<<54n;1===f.Color&&(e>>=40n),0n!==(e&this.Position.PiecesBB[f.Color][0])&&(s[f.Color]-=this.MGCorneredBishopPenalty,t[f.Color]-=this.EGCorneredBishopPenalty)}break}case 3:{const e=this.GenerateRookAttacks(o,c),n=this.CountBits(e);s[f.Color]+=this.MGRookMobility[n],t[f.Color]+=this.EGRookMobility[n],0n===(this.Position.PiecesBB[f.Color][0]&this.fileMasks[i])&&(0n===(this.Position.PiecesBB[1^f.Color][0]&this.fileMasks[i])?s[f.Color]+=this.MGfileOpenScore:s[f.Color]+=this.MGfileSemiOpenScore),this.fileMasks[i]&this.Position.PiecesBB[1^f.Color][4]&&(s[f.Color]+=this.MGrookQueenFileBonus);break}case 4:{const e=this.GenerateBishopAttacks(o,c)|this.GenerateRookAttacks(o,c),i=this.CountBits(e);s[f.Color]+=this.MGQueenMobility[i],t[f.Color]+=this.EGQueenMobility[i];break}case 5:if(c!==this.KingSquares[f.Color]){this.KingSquares[f.Color]=c;const e=Math.min(Math.max(7&i,1),6);let t=1;for(let i=e-1;i<=e+1;i++)0n===(this.fileMasks[i]&this.Position.PiecesBB[f.Color][0])&&(s[f.Color]-=this.MGKingSemiOpenPenalty*t*t,t++)}}}return n[0]>=2&&(s[0]+=this.MGBishopPairBonus,t[0]+=this.EGBishopPairBonus),n[1]>=2&&(s[1]+=this.MGBishopPairBonus,t[1]+=this.EGBishopPairBonus),i=(256*i+this.PhaseTotal/2)/this.PhaseTotal|0,((s[this.Position.SideToMove]-s[1^this.Position.SideToMove])*(256-i)+(t[this.Position.SideToMove]-t[1^this.Position.SideToMove])*i)/256|0}EvaluatePawns(){let e=[0,0],s=[0,0],t=this.Position.PiecesBB[0][0]|this.Position.PiecesBB[1][0];for(;t;){let i=this.GetLS1B(t);t=this.RemoveBit(t,i);const n=this.Position.Squares[i];1===n.Color&&(i^=56),e[n.Color]+=this.PST[0][0][i]+this.MGPieceValue[0],s[n.Color]+=this.PST[1][0][i]+this.EGPieceValue[0];const o=this.Position.PiecesBB[n.Color][0]&this.fileMasks[i];if(0n!==(o&o-1n)&&(e[n.Color]-=this.MGdoubledPenalty,s[n.Color]-=this.EGdoubledPenalty),0n===(this.Position.PiecesBB[n.Color][0]&this.isolatedMasks[i])&&(e[n.Color]-=this.MGisolatedPenalty,s[n.Color]-=this.EGisolatedPenalty),0n===(this.passedMasks[n.Color][i]&this.Position.PiecesBB[1^n.Color][0])){const t=7-(i>>3);e[n.Color]+=this.MGpassedBonus[t],s[n.Color]+=this.EGpassedBonus[t]}}return{mgScores:e,egScores:s}}Search(e){this.search.nodes=0;let s={moves:[]},t="";this.StartTimer();let i=-this.Inf,n=this.Inf,o=-this.Inf;this.AgeHistory();const a=Date.now(),c=()=>o<-this.Checkmate?"mate "+(-this.Inf-o)/2:o>this.Checkmate?"mate "+(this.Inf-o+1)/2:`cp ${o}`;this.Position.Ply=0;for(let h=1;h<=e;h++){s.moves.length=0;let e=10;for(h>=4&&(i=Math.max(o-e,-this.Inf),n=Math.min(o+e,this.Inf));o=this.Negamax(h,i,n,s),!this.Timer.stop;){if(o<=i)i=Math.max(o-e,-this.Inf),n=(i+n)/2;else{if(!(o>=n))break;n=Math.min(o+e,this.Inf)}e+=e/5+2}const f=Date.now();if(this.Timer.stop)break;t=this.PrettyPrintMove(s.moves[0]),console.log(`info depth ${h} score ${c()} nodes ${this.search.nodes} nps ${1e3*this.search.nodes/(f-a)|0} time ${f-a} pv ${s.moves.map((e=>this.PrettyPrintMove(e))).join(" ")}`)}return console.log(`bestmove ${t}`),t}Negamax(e,s,t,i,n=!0){let o=-this.Inf,a=1,c=0,h=!1;const f=t-s>1,r=0===this.Position.Ply,d={moves:[]};if(this.search.nodes%1e3==0&&(this.CheckTime(),this.Timer.stop))return 0;if(this.search.nodes++,!r&&(this.IsRepetition()||this.Position.HalfMoves>=100))return 0;if(e<=0)return this.Quiescence(s,t);const b=this.IsSquareAttacked(this.GetLS1B(this.Position.PiecesBB[this.Position.SideToMove][5]),1^this.Position.SideToMove);b&&(e+=1);const{ttScore:x,ttMove:P}=this.ProbeTT(e,s,t);if(x!==this.HashNoMove&&!f)return x;let l=P;if(!r&&!b){const i=this.Evaluate();if(e<=2&&i+150*e<s){const e=this.Quiescence(s,t);if(e<s)return e}if(!f&&e<=6&&i-50*e>=t&&Math.abs(i)<this.Checkmate)return i;if(!f&&n&&e>=2&&i>=t){this.MakeNullMove();const s=3+Math.floor(e/5);let i=-this.Negamax(e-1-s,-t,1-t,d,!1);if(this.UnmakeNullMove(),d.moves.length=0,i>=t)return Math.abs(i)>this.Checkmate?t:i}e<=4&&i+300*e<=s&&(h=!0)}let B=b?this.GenerateEvasions():this.GenerateMoves();B=this.SortMoves(B,P);for(let n=0;n<B.length;n++){const f=B[n],r=this.MoveIsCapture(f),x=this.MoveIsPromotion(f);if(!r&&!x&&o>-this.Checkmate){if(e<=2&&c>5*e)continue;if(h&&c>1)continue}if(!b&&r&&this.See(f)<-300*e)continue;if(!this.MakeMove(f)){this.UnmakeMove(f);continue}c++;let P=0,p=.45*Math.log(e*c**2)|0;if(c>1?(P=-this.Negamax(e-p-1,-s-1,-s,d),P>s&&p>0&&(P=-this.Negamax(e-1,-t,-s,d))):P=-this.Negamax(e-1,-t,-s,d),this.UnmakeMove(f),P>o){if(o=P,P>s){if(l=f,i.moves.length=0,i.moves.push(f),i.moves.push(...d.moves),this.Timer.extended=e>1&&P<this.search.bestMove.score-30,this.search.bestMove={move:l,score:o},!(P<t))return a=2,r||(this.search.killers[1][this.Position.Ply]=this.search.killers[0][this.Position.Ply],this.search.killers[0][this.Position.Ply]=f,this.search.history[this.Position.SideToMove][63&f][(4032&f)>>6]+=e*e),this.WriteTT(e,a,o,l),t;s=P,a=0}}else r||this.search.history[this.Position.SideToMove][63&f][(4032&f)>>6]>0&&(this.search.history[this.Position.SideToMove][63&f][(4032&f)>>6]-=1);d.moves.length=0}return 0===c?b?-this.Inf+this.Position.Ply:0:(this.WriteTT(e,a,o,l),o)}Quiescence(e,s){if(this.search.nodes%1e3==0&&(this.CheckTime(),this.Timer.stop))return 0;let t=1;this.search.nodes++;const{ttScore:i,ttMove:n}=this.ProbeTT(0,e,s);if(i!==this.HashNoMove)return i;let o=n,a=i,c=a;const h=this.IsSquareAttacked(this.GetLS1B(this.Position.PiecesBB[this.Position.SideToMove][5]),1^this.Position.SideToMove);if(h)a=-this.Inf,c=a;else{if(a===this.HashNoMove&&(a=this.Evaluate()),a>=s)return a;a>e&&(e=a),c=a+150}let f=h?this.GenerateEvasions():this.GenerateMoves(!0);f=this.SortMoves(f,o);for(let i=0;i<f.length;i++){const n=f[i];if(!h&&!this.MoveIsPromotion(n)){const s=c+this.EGPieceValue[this.Position.Squares[(4032&n)>>6]?.Type??0];if(s<=e){a<s&&(a=s);continue}}if(this.See(n)<0)continue;if(!this.MakeMove(n)){this.UnmakeMove(n);continue}let r=-this.Quiescence(-s,-e);if(this.UnmakeMove(n),r>a&&(a=r,o=n),r>=s)return this.WriteTT(0,2,a,o),a;r>e&&(t=0,e=r)}return h&&a===-this.Inf?-this.Inf+this.Position.Ply:(this.WriteTT(0,t,a,o),a)}IsRepetition(){for(let e=this.PositionHistory.length-this.Position.HalfMoves;e<this.PositionHistory.length-1;e++)if(this.PositionHistory[e]===this.Position.Hash)return!0;return!1}AgeHistory(){for(let s=e.a8;s<=e.h1;s++)for(let t=e.a8;t<=e.h1;t++)this.search.history[this.Position.SideToMove][s][t]/=2}SortMoves(e,s){const t=[];for(let i=0;i<e.length;i++){const n=e[i];if(n===s)t.push({move:n,score:this.Inf});else if(this.MoveIsCapture(n)){const e=this.Position.Squares[63&n];let s=this.Position.Squares[(4032&n)>>6];if((16256&n)>>12==2&&(s=this.Position.Squares[0===this.Position.SideToMove?8+((4032&n)>>6):((4032&n)>>6)-8]),e.Type>s.Type){const i=this.MGPieceValue[s.Type]-e.Type+7e3;t.push({move:n,score:i})}else{const i=this.MGPieceValue[s.Type]-e.Type+1e4;t.push({move:n,score:i})}}else n===this.search.killers[0][this.Position.Ply]?t.push({move:n,score:9e3}):n===this.search.killers[1][this.Position.Ply]?t.push({move:n,score:8e3}):t.push({move:n,score:this.search.history[this.Position.SideToMove][63&n][(4032&n)>>6]})}const i=t.length;for(let e=1;e<i;e++){let s=t[e],i=e-1;for(;i>-1&&s.score>t[i].score;)t[i+1]=t[i],i--;t[i+1]=s}return t.map((({move:e})=>e))}See(e){const s=(4032&e)>>6,t=63&e,i=this.Position.Squares[t].Type;let n=this.Position.Squares[s]?.Type,o=1^this.Position.SideToMove;if(void 0===n)return 0;const a=[];let c=0,h=this.SetBit(0n,t),f=this.AttacksTo(s),r=0n;const d=this.Position.PiecesBB[0][0]|this.Position.PiecesBB[0][2]|this.Position.PiecesBB[0][3]|this.Position.PiecesBB[0][4]|this.Position.PiecesBB[1][0]|this.Position.PiecesBB[1][2]|this.Position.PiecesBB[1][3]|this.Position.PiecesBB[1][4];for(a[c]=this.MGPieceValue[n];h&&(c++,a[c]=this.MGPieceValue[i]-a[c-1],!(Math.max(-a[c-1],a[c])<0));){f^=h,r|=h,h&d&&(f|=this.ConsiderXRays(s)&~r);const{bitboard:e,piece:t}=this.GetLeastValuablePiece(f,o,n);h=e,n=t,o^=1}for(;--c;)a[c-1]=-Math.max(-a[c-1],a[c]);return a[0]}AttacksTo(e){const s=this.Position.PiecesBB[0][0]&this.PawnAttacks[1][e]|this.Position.PiecesBB[1][0]&this.PawnAttacks[0][e],t=(this.Position.PiecesBB[0][1]|this.Position.PiecesBB[1][1])&this.KnightAttacks[e],i=(this.Position.PiecesBB[0][5]|this.Position.PiecesBB[1][5])&this.KingAttacks[e],n=this.Position.OccupanciesBB[0]|this.Position.OccupanciesBB[1];let o=this.Position.PiecesBB[0][2]|this.Position.PiecesBB[1][2]|this.Position.PiecesBB[0][4]|this.Position.PiecesBB[1][4];o&=this.GenerateBishopAttacks(n,e);let a=this.Position.PiecesBB[0][3]|this.Position.PiecesBB[1][3]|this.Position.PiecesBB[0][4]|this.Position.PiecesBB[1][4];return a&=this.GenerateRookAttacks(n,e),s|t|i|o|a}AttacksToByColor(e,s){const t=this.Position.PiecesBB[s][0]&this.PawnAttacks[1^s][e],i=this.Position.PiecesBB[s][1]&this.KnightAttacks[e],n=this.Position.PiecesBB[s][5]&this.KingAttacks[e],o=this.Position.OccupanciesBB[0]|this.Position.OccupanciesBB[1];let a=this.Position.PiecesBB[s][2]|this.Position.PiecesBB[s][4];a&=this.GenerateBishopAttacks(o,e);let c=this.Position.PiecesBB[s][3]|this.Position.PiecesBB[s][4];return c&=this.GenerateRookAttacks(o,e),t|i|n|a|c}ConsiderXRays(e){const s=this.Position.OccupanciesBB[0]|this.Position.OccupanciesBB[1];let t=this.Position.PiecesBB[0][2]|this.Position.PiecesBB[1][2]|this.Position.PiecesBB[0][4]|this.Position.PiecesBB[1][4];t&=this.GenerateBishopAttacks(s,e);let i=this.Position.PiecesBB[0][3]|this.Position.PiecesBB[1][3]|this.Position.PiecesBB[0][4]|this.Position.PiecesBB[1][4];return i&=this.GenerateRookAttacks(s,e),t|i}GetLeastValuablePiece(e,s,t){for(t=0;t<=5;t++){let i=e&this.Position.PiecesBB[s][t];if(i)return{bitboard:i&-i,piece:t}}return{bitboard:0n,piece:0}}StartTimer(){let e=0;if(this.Timer.stop=!1,this.Timer.extended=!1,-1!==this.Timer.timeleft||-1!==this.Timer.movetime){if(0!==this.Timer.movestogo)e=this.Timer.timeleft/this.Timer.movestogo;else if(-1!==this.Timer.movetime)e=this.Timer.movetime;else{let s=0;s=this.Position.Ply<=20?45-this.Position.Ply:25,e=this.Timer.timeleft/s}e+=this.Timer.increment/2,e>=this.Timer.timeleft&&(e-=this.Timer.increment),e<=0&&(e=this.Timer.increment-1),this.Timer.startTime=Date.now(),this.Timer.stopTime=this.Timer.startTime+e}}CheckTime(){(this.Timer.stop||-1!==this.Timer.timeleft||-1!==this.Timer.movetime)&&Date.now()>this.Timer.stopTime&&(!this.Timer.extended||Date.now()-this.Timer.startTime>=.75*this.Timer.timeleft)&&(this.Timer.stop=!0)}ParseUCIPosition(e){const t=e.split(" ").slice(1).join(" ");t.startsWith("fen")?this.LoadFEN(t.split(" ").slice(1).join(" ")):this.LoadFEN(s.positions.start);const i=t.split("moves ").slice(1).join(" ").split(" ").filter((e=>""!=e));for(let s=0;s<i.length;s++){const t=this.ParseUCIMove(i[s]);if(!t){console.error("Unable to parse UCI command"),console.log(`Command: ${e}`),console.log(`Invalid move: ${i[s]}`);break}this.MakeMove(t)}}ParseUCIMove(s){const t=parseInt(s.charAt(0),36)-10,i=8*(7-(parseInt(s.charAt(1))-1))+t,n=parseInt(s.charAt(2),36)-10;let o=8*(7-(parseInt(s.charAt(3))-1))+n;const a=this.Position.Squares[i];let c=0,h=0;if(5===s.length){const e=s.charAt(4);c=1,"n"===e?h=0:"b"===e?h=1:"r"===e?h=2:"q"===e&&(h=3)}return 5===a.Type?this.isChess960||"e1g1"!==s&&"e1c1"!==s&&"e8g8"!==s&&"e8c8"!==s?(o===this.Position.CastlingRookSquares[1]&&1&this.Position.CastlingRights||o===this.Position.CastlingRookSquares[4]&&4&this.Position.CastlingRights||o===this.Position.CastlingRookSquares[2]&&2&this.Position.CastlingRights||o===this.Position.CastlingRookSquares[8]&&8&this.Position.CastlingRights)&&(c=3):(c=3,o=(o>i?e.h1:e.a1)^56*a.Color):o===this.Position.EnPassSq&&0===a.Type&&(c=2),this.EncodeMove(i,o,c,h)}ParseUCIGo(e){const s=e.split(" "),t=0===this.Position.SideToMove?"w":"b";let i=-1,n=0,o=0,a=-1,c=this.MaxPly;for(let e=0;e<s.length;e++){const h=s[e];h===t+"time"?i=parseInt(s[e+1]):h===t+"inc"?n=parseInt(s[e+1]):"movestogo"===h?o=parseInt(s[e+1]):"depth"===h?c=Math.min(parseInt(s[e+1]),this.MaxPly):"movetime"===h&&(a=parseInt(s[e+1]))}return this.Timer.timeleft=i,this.Timer.increment=n,this.Timer.depth=c,this.Timer.movestogo=o,this.Timer.movetime=a,this.Search(c)}Perft(e,s=!1){this.totalNodes=0;const t=performance.now(),i=this.GenerateMoves();for(let t=0;t<i.length;t++){const n=i[t];if(this.MakeMove(n)){let t=this.PerftDriver(e-1);s&&console.log(`${this.PrettyPrintMove(n)}: ${t}`)}this.UnmakeMove(n)}const n=performance.now();return s&&console.log(`Nodes: ${this.totalNodes.toLocaleString()}. Time taken: ${n-t}`),this.totalNodes}PerftDriver(e){let s=0;if(0===e)return this.totalNodes++,1;const t=this.GenerateMoves();for(let i=0;i<t.length;i++){const n=t[i];this.MakeMove(n)&&(s+=this.PerftDriver(e-1)),this.UnmakeMove(n)}return s}}s.positions={empty:"8/8/8/8/8/8/8/8 b - - ",start:"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1",kiwipete:"r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq -",pos3:"8/2p5/3p4/KP5r/1R3p1k/8/4P1P1/8 w - -",pos4w:"r3k2r/Pppp1ppp/1b3nbN/nP6/BBP1P3/q4N2/Pp1P2PP/R2Q1RK1 w kq - 0 1",pos4b:"r2q1rk1/pP1p2pp/Q4n2/bbp1p3/Np6/1B3NBn/pPPP1PPP/R3K2R b KQ - 0 1",pos5:"rnbq1k1r/pp1Pbppp/2p5/8/2B5/8/PPP1NnPP/RNBQK2R w KQ - 1 8",pos6:"r4rk1/1pp1qppp/p1np1n2/2b1p1B1/2B1P1b1/P1NP1N2/1PP1QPPP/R4RK1 w - - 0 10"};const i=s,n=require("fs");var o=t.n(n);const a=require("path");var c=t.n(a);class h{constructor(){this._entries=null,this._filePath=c().join(__dirname,"khepri_polyglot.bin")}TryLoad(){if(o().existsSync(this._filePath)){const s=o().readFileSync(this._filePath),t=Buffer.from(s);this._entries=new Map;let i=0;for(;i<t.length;){const s=t.readUInt16BE(i+8),n=`${e[(4032&s)>>6^56]}${e[63&s^56]}`,o=s>>12;let a="";switch(o>0&&console.log(o),o){case 8:case 12:a="n";break;case 9:case 13:a="b";break;case 10:case 14:a="r";break;case 11:case 15:a="q"}const c=t.readBigUInt64BE(i);if(this._entries.has(c)){const e=this._entries.get(c);e.weight<t.readUInt16BE(i+10)&&(e.move=`${n}${a}`,e.weight=t.readUInt16BE(i+10),this._entries.set(c,e))}else this._entries.set(c,{move:`${n}${a}`,weight:t.readUInt16BE(i+10)});i+=16}}return this._entries}static PolyglotHash(s){let t=0n;for(let[e,i]of s.Squares.entries()){if(void 0===i)continue;let s=2*i.Type;0===i.Color&&(s+=1),t^=f[64*s+(56^e)]}return s.EnPassSq!==e.no_sq&&(t^=f[772+s.EnPassSq%8]),1&s.CastlingRights&&(t^=f[768]),2&s.CastlingRights&&(t^=f[769]),4&s.CastlingRights&&(t^=f[770]),8&s.CastlingRights&&(t^=f[771]),0===s.SideToMove&&(t^=f[780]),t}TestHashing(){const e=[{fen:"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1",hash:0x463b96181691fc9cn},{fen:"rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq e3 0 1",hash:0x823c9b50fd114196n},{fen:"rnbqkbnr/ppp1pppp/8/3p4/4P3/8/PPPP1PPP/RNBQKBNR w KQkq d6 0 2",hash:0x0756b94461c50fb0n},{fen:"rnbqkbnr/ppp1pppp/8/3pP3/8/8/PPPP1PPP/RNBQKBNR b KQkq - 0 2",hash:0x662fafb965db29d4n},{fen:"rnbqkbnr/ppp1p1pp/8/3pPp2/8/8/PPPP1PPP/RNBQKBNR w KQkq f6 0 3",hash:0x22a48b5a8e47ff78n},{fen:"rnbqkbnr/ppp1p1pp/8/3pPp2/8/8/PPPPKPPP/RNBQ1BNR b kq - 0 3",hash:0x652a607ca3f242c1n},{fen:"rnbq1bnr/ppp1pkpp/8/3pPp2/8/8/PPPPKPPP/RNBQ1BNR w - - 0 4",hash:0x00fdd303c946bdd9n},{fen:"rnbqkbnr/p1pppppp/8/8/PpP4P/8/1P1PPPP1/RNBQKBNR b KQkq c3 0 3",hash:0x3c8123ea7b067637n},{fen:"rnbqkbnr/p1pppppp/8/8/P6P/R1p5/1P1PPPP1/1NBQKBNR b Kkq - 0 4",hash:0x5c3f9b829b279560n}],s=new i;for(let t of e){s.LoadFEN(t.fen);const e=h.PolyglotHash(s.Position);console.assert(e===t.hash,`Polyglot hash for position ${t.fen} is incorrect! Generated ${e} instead of ${t.hash}`)}console.log("Testing completed")}}const f=[0x9d39247e33776d41n,0x2af7398005aaa5c7n,0x44db015024623547n,0x9c15f73e62a76ae2n,0x75834465489c0c89n,0x3290ac3a203001bfn,0x0fbbad1f61042279n,0xe83a908ff2fb60can,0x0d7e765d58755c10n,0x1a083822ceafe02dn,0x9605d5f0e25ec3b0n,0xd021ff5cd13a2ed5n,0x40bdf15d4a672e32n,0x011355146fd56395n,0x5db4832046f3d9e5n,0x239f8b2d7ff719ccn,0x05d1a1ae85b49aa1n,0x679f848f6e8fc971n,0x7449bbff801fed0bn,0x7d11cdb1c3b7adf0n,0x82c7709e781eb7ccn,0xf3218f1c9510786cn,0x331478f3af51bbe6n,0x4bb38de5e7219443n,0xaa649c6ebcfd50fcn,0x8dbd98a352afd40bn,0x87d2074b81d79217n,0x19f3c751d3e92ae1n,0xb4ab30f062b19abfn,0x7b0500ac42047ac4n,0xc9452ca81a09d85dn,0x24aa6c514da27500n,0x4c9f34427501b447n,0x14a68fd73c910841n,0xa71b9b83461cbd93n,0x03488b95b0f1850fn,0x637b2b34ff93c040n,0x09d1bc9a3dd90a94n,0x3575668334a1dd3bn,0x735e2b97a4c45a23n,0x18727070f1bd400bn,0x1fcbacd259bf02e7n,0xd310a7c2ce9b6555n,0xbf983fe0fe5d8244n,0x9f74d14f7454a824n,0x51ebdc4ab9ba3035n,0x5c82c505db9ab0fan,0xfcf7fe8a3430b241n,0x3253a729b9ba3dden,0x8c74c368081b3075n,0xb9bc6c87167c33e7n,0x7ef48f2b83024e20n,0x11d505d4c351bd7fn,0x6568fca92c76a243n,0x4de0b0f40f32a7b8n,0x96d693460cc37e5dn,0x42e240cb63689f2fn,0x6d2bdcdae2919661n,0x42880b0236e4d951n,0x5f0f4a5898171bb6n,0x39f890f579f92f88n,0x93c5b5f47356388bn,0x63dc359d8d231b78n,0xec16ca8aea98ad76n,0x5355f900c2a82dc7n,0x07fb9f855a997142n,0x5093417aa8a7ed5en,0x7bcbc38da25a7f3cn,0x19fc8a768cf4b6d4n,0x637a7780decfc0d9n,0x8249a47aee0e41f7n,0x79ad695501e7d1e8n,0x14acbaf4777d5776n,0xf145b6beccdea195n,0xdabf2ac8201752fcn,0x24c3c94df9c8d3f6n,0xbb6e2924f03912ean,0x0ce26c0b95c980d9n,0xa49cd132bfbf7cc4n,0xe99d662af4243939n,0x27e6ad7891165c3fn,0x8535f040b9744ff1n,0x54b3f4fa5f40d873n,0x72b12c32127fed2bn,0xee954d3c7b411f47n,0x9a85ac909a24eaa1n,0x70ac4cd9f04f21f5n,0xf9b89d3e99a075c2n,0x87b3e2b2b5c907b1n,0xa366e5b8c54f48b8n,0xae4a9346cc3f7cf2n,0x1920c04d47267bbdn,0x87bf02c6b49e2ae9n,0x092237ac237f3859n,0xff07f64ef8ed14d0n,0x8de8dca9f03cc54en,0x9c1633264db49c89n,0xb3f22c3d0b0b38edn,0x390e5fb44d01144bn,0x5bfea5b4712768e9n,0x1e1032911fa78984n,0x9a74acb964e78cb3n,0x4f80f7a035dafb04n,0x6304d09a0b3738c4n,0x2171e64683023a08n,0x5b9b63eb9ceff80cn,0x506aacf489889342n,0x1881afc9a3a701d6n,0x6503080440750644n,0xdfd395339cdbf4a7n,0xef927dbcf00c20f2n,0x7b32f7d1e03680ecn,0xb9fd7620e7316243n,0x05a7e8a57db91b77n,0xb5889c6e15630a75n,0x4a750a09ce9573f7n,0xcf464cec899a2f8an,0xf538639ce705b824n,0x3c79a0ff5580ef7fn,0xede6c87f8477609dn,0x799e81f05bc93f31n,0x86536b8cf3428a8cn,0x97d7374c60087b73n,0xa246637cff328532n,0x043fcae60cc0eba0n,0x920e449535dd359en,0x70eb093b15b290ccn,0x73a1921916591cbdn,0x56436c9fe1a1aa8dn,0xefac4b70633b8f81n,0xbb215798d45df7afn,0x45f20042f24f1768n,0x930f80f4e8eb7462n,0xff6712ffcfd75ea1n,0xae623fd67468aa70n,0xdd2c5bc84bc8d8fcn,0x7eed120d54cf2dd9n,0x22fe545401165f1cn,0xc91800e98fb99929n,0x808bd68e6ac10365n,0xdec468145b7605f6n,0x1bede3a3aef53302n,0x43539603d6c55602n,0xaa969b5c691ccb7an,0xa87832d392efee56n,0x65942c7b3c7e11aen,0xded2d633cad004f6n,0x21f08570f420e565n,0xb415938d7da94e3cn,0x91b859e59ecb6350n,0x10cff333e0ed804an,0x28aed140be0bb7ddn,0xc5cc1d89724fa456n,0x5648f680f11a2741n,0x2d255069f0b7dab3n,0x9bc5a38ef729abd4n,0xef2f054308f6a2bcn,0xaf2042f5cc5c2858n,0x480412bab7f5be2an,0xaef3af4a563dfe43n,0x19afe59ae451497fn,0x52593803dff1e840n,0xf4f076e65f2ce6f0n,0x11379625747d5af3n,0xbce5d2248682c115n,0x9da4243de836994fn,0x066f70b33fe09017n,0x4dc4de189b671a1cn,0x51039ab7712457c3n,0xc07a3f80c31fb4b4n,0xb46ee9c5e64a6e7cn,0xb3819a42abe61c87n,0x21a007933a522a20n,0x2df16f761598aa4fn,0x763c4a1371b368fdn,0xf793c46702e086a0n,0xd7288e012aeb8d31n,0xde336a2a4bc1c44bn,0x0bf692b38d079f23n,0x2c604a7a177326b3n,0x4850e73e03eb6064n,0xcfc447f1e53c8e1bn,0xb05ca3f564268d99n,0x9ae182c8bc9474e8n,0xa4fc4bd4fc5558can,0xe755178d58fc4e76n,0x69b97db1a4c03dfen,0xf9b5b7c4acc67c96n,0xfc6a82d64b8655fbn,0x9c684cb6c4d24417n,0x8ec97d2917456ed0n,0x6703df9d2924e97en,0xc547f57e42a7444en,0x78e37644e7cad29en,0xfe9a44e9362f05fan,0x08bd35cc38336615n,0x9315e5eb3a129acen,0x94061b871e04df75n,0xdf1d9f9d784ba010n,0x3bba57b68871b59dn,0xd2b7adeeded1f73fn,0xf7a255d83bc373f8n,0xd7f4f2448c0ceb81n,0xd95be88cd210ffa7n,0x336f52f8ff4728e7n,0xa74049dac312ac71n,0xa2f61bb6e437fdb5n,0x4f2a5cb07f6a35b3n,0x87d380bda5bf7859n,0x16b9f7e06c453a21n,0x7ba2484c8a0fd54en,0xf3a678cad9a2e38cn,0x39b0bf7dde437ba2n,0xfcaf55c1bf8a4424n,0x18fcf680573fa594n,0x4c0563b89f495ac3n,0x40e087931a00930dn,0x8cffa9412eb642c1n,0x68ca39053261169fn,0x7a1ee967d27579e2n,0x9d1d60e5076f5b6fn,0x3810e399b6f65ba2n,0x32095b6d4ab5f9b1n,0x35cab62109dd038an,0xa90b24499fcfafb1n,0x77a225a07cc2c6bdn,0x513e5e634c70e331n,0x4361c0ca3f692f12n,0xd941aca44b20a45bn,0x528f7c8602c5807bn,0x52ab92beb9613989n,0x9d1dfa2efc557f73n,0x722ff175f572c348n,0x1d1260a51107fe97n,0x7a249a57ec0c9ba2n,0x04208fe9e8f7f2d6n,0x5a110c6058b920a0n,0x0cd9a497658a5698n,0x56fd23c8f9715a4cn,0x284c847b9d887aaen,0x04feabfbbdb619cbn,0x742e1e651c60ba83n,0x9a9632e65904ad3cn,0x881b82a13b51b9e2n,0x506e6744cd974924n,0xb0183db56ffc6a79n,0x0ed9b915c66ed37en,0x5e11e86d5873d484n,0xf678647e3519ac6en,0x1b85d488d0f20cc5n,0xdab9fe6525d89021n,0x0d151d86adb73615n,0xa865a54edcc0f019n,0x93c42566aef98ffbn,0x99e7afeabe000731n,0x48cbff086ddf285an,0x7f9b6af1ebf78bafn,0x58627e1a149bba21n,0x2cd16e2abd791e33n,0xd363eff5f0977996n,0x0ce2a38c344a6eedn,0x1a804aadb9cfa741n,0x907f30421d78c5den,0x501f65edb3034d07n,0x37624ae5a48fa6e9n,0x957baf61700cff4en,0x3a6c27934e31188an,0xd49503536abca345n,0x088e049589c432e0n,0xf943aee7febf21b8n,0x6c3b8e3e336139d3n,0x364f6ffa464ee52en,0xd60f6dcedc314222n,0x56963b0dca418fc0n,0x16f50edf91e513afn,0xef1955914b609f93n,0x565601c0364e3228n,0xecb53939887e8175n,0xbac7a9a18531294bn,0xb344c470397bba52n,0x65d34954daf3cebdn,0xb4b81b3fa97511e2n,0xb422061193d6f6a7n,0x071582401c38434dn,0x7a13f18bbedc4ff5n,0xbc4097b116c524d2n,0x59b97885e2f2ea28n,0x99170a5dc3115544n,0x6f423357e7c6a9f9n,0x325928ee6e6f8794n,0xd0e4366228b03343n,0x565c31f7de89ea27n,0x30f5611484119414n,0xd873db391292ed4fn,0x7bd94e1d8e17debcn,0xc7d9f16864a76e94n,0x947ae053ee56e63cn,0xc8c93882f9475f5fn,0x3a9bf55ba91f81can,0xd9a11fbb3d9808e4n,0x0fd22063edc29fcan,0xb3f256d8aca0b0b9n,0xb03031a8b4516e84n,0x35dd37d5871448afn,0xe9f6082b05542e4en,0xebfafa33d7254b59n,0x9255abb50d532280n,0xb9ab4ce57f2d34f3n,0x693501d628297551n,0xc62c58f97dd949bfn,0xcd454f8f19c5126an,0xbbe83f4ecc2bdecbn,0xdc842b7e2819e230n,0xba89142e007503b8n,0xa3bc941d0a5061cbn,0xe9f6760e32cd8021n,0x09c7e552bc76492fn,0x852f54934da55cc9n,0x8107fccf064fcf56n,0x098954d51fff6580n,0x23b70edb1955c4bfn,0xc330de426430f69dn,0x4715ed43e8a45c0an,0xa8d7e4dab780a08dn,0x0572b974f03ce0bbn,0xb57d2e985e1419c7n,0xe8d9ecbe2cf3d73fn,0x2fe4b17170e59750n,0x11317ba87905e790n,0x7fbf21ec8a1f45ecn,0x1725cabfcb045b00n,0x964e915cd5e2b207n,0x3e2b8bcbf016d66dn,0xbe7444e39328a0acn,0xf85b2b4fbcde44b7n,0x49353fea39ba63b1n,0x1dd01aafcd53486an,0x1fca8a92fd719f85n,0xfc7c95d827357afan,0x18a6a990c8b35ebdn,0xcccb7005c6b9c28dn,0x3bdbb92c43b17f26n,0xaa70b5b4f89695a2n,0xe94c39a54a98307fn,0xb7a0b174cff6f36en,0xd4dba84729af48adn,0x2e18bc1ad9704a68n,0x2de0966daf2f8b1cn,0xb9c11d5b1e43a07en,0x64972d68dee33360n,0x94628d38d0c20584n,0xdbc0d2b6ab90a559n,0xd2733c4335c6a72fn,0x7e75d99d94a70f4dn,0x6ced1983376fa72bn,0x97fcaacbf030bc24n,0x7b77497b32503b12n,0x8547eddfb81ccb94n,0x79999cdff70902cbn,0xcffe1939438e9b24n,0x829626e3892d95d7n,0x92fae24291f2b3f1n,0x63e22c147b9c3403n,0xc678b6d860284a1cn,0x5873888850659ae7n,0x0981dcd296a8736dn,0x9f65789a6509a440n,0x9ff38fed72e9052fn,0xe479ee5b9930578cn,0xe7f28ecd2d49eecdn,0x56c074a581ea17fen,0x5544f7d774b14aefn,0x7b3f0195fc6f290fn,0x12153635b2c0cf57n,0x7f5126dbba5e0ca7n,0x7a76956c3eafb413n,0x3d5774a11d31ab39n,0x8a1b083821f40cb4n,0x7b4a38e32537df62n,0x950113646d1d6e03n,0x4da8979a0041e8a9n,0x3bc36e078f7515d7n,0x5d0a12f27ad310d1n,0x7f9d1a2e1ebe1327n,0xda3a361b1c5157b1n,0xdcdd7d20903d0c25n,0x36833336d068f707n,0xce68341f79893389n,0xab9090168dd05f34n,0x43954b3252dc25e5n,0xb438c2b67f98e5e9n,0x10dcd78e3851a492n,0xdbc27ab5447822bfn,0x9b3cdb65f82ca382n,0xb67b7896167b4c84n,0xbfced1b0048eac50n,0xa9119b60369ffebdn,0x1fff7ac80904bf45n,0xac12fb171817eee7n,0xaf08da9177dda93dn,0x1b0cab936e65c744n,0xb559eb1d04e5e932n,0xc37b45b3f8d6f2ban,0xc3a9dc228caac9e9n,0xf3b8b6675a6507ffn,0x9fc477de4ed681dan,0x67378d8eccef96cbn,0x6dd856d94d259236n,0xa319ce15b0b4db31n,0x073973751f12dd5en,0x8a8e849eb32781a5n,0xe1925c71285279f5n,0x74c04bf1790c0efen,0x4dda48153c94938an,0x9d266d6a1cc0542cn,0x7440fb816508c4fen,0x13328503df48229fn,0xd6bf7baee43cac40n,0x4838d65f6ef6748fn,0x1e152328f3318dean,0x8f8419a348f296bfn,0x72c8834a5957b511n,0xd7a023a73260b45cn,0x94ebc8abcfb56daen,0x9fc10d0f989993e0n,0xde68a2355b93cae6n,0xa44cfe79ae538bben,0x9d1d84fcce371425n,0x51d2b1ab2ddfb636n,0x2fd7e4b9e72cd38cn,0x65ca5b96b7552210n,0xdd69a0d8ab3b546dn,0x604d51b25fbf70e2n,0x73aa8a564fb7ac9en,0x1a8c1e992b941148n,0xaac40a2703d9bea0n,0x764dbeae7fa4f3a6n,0x1e99b96e70a9be8bn,0x2c5e9deb57ef4743n,0x3a938fee32d29981n,0x26e6db8ffdf5adfen,0x469356c504ec9f9dn,0xc8763c5b08d1908cn,0x3f6c6af859d80055n,0x7f7cc39420a3a545n,0x9bfb227ebdf4c5cen,0x89039d79d6fc5c5cn,0x8fe88b57305e2ab6n,0xa09e8c8c35ab96den,0xfa7e393983325753n,0xd6b6d0ecc617c699n,0xdfea21ea9e7557e3n,0xb67c1fa481680af8n,0xca1e3785a9e724e5n,0x1cfc8bed0d681639n,0xd18d8549d140caean,0x4ed0fe7e9dc91335n,0xe4dbf0634473f5d2n,0x1761f93a44d5aefen,0x53898e4c3910da55n,0x734de8181f6ec39an,0x2680b122baa28d97n,0x298af231c85bafabn,0x7983eed3740847d5n,0x66c1a2a1a60cd889n,0x9e17e49642a3e4c1n,0xedb454e7badc0805n,0x50b704cab602c329n,0x4cc317fb9cddd023n,0x66b4835d9eafea22n,0x219b97e26ffc81bdn,0x261e4e4c0a333a9dn,0x1fe2cca76517db90n,0xd7504dfa8816edbbn,0xb9571fa04dc089c8n,0x1ddc0325259b27den,0xcf3f4688801eb9aan,0xf4f5d05c10cab243n,0x38b6525c21a42b0en,0x36f60e2ba4fa6800n,0xeb3593803173e0cen,0x9c4cd6257c5a3603n,0xaf0c317d32adaa8an,0x258e5a80c7204c4bn,0x8b889d624d44885dn,0xf4d14597e660f855n,0xd4347f66ec8941c3n,0xe699ed85b0dfb40dn,0x2472f6207c2d0484n,0xc2a1e7b5b459aeb5n,0xab4f6451cc1d45ecn,0x63767572ae3d6174n,0xa59e0bd101731a28n,0x116d0016cb948f09n,0x2cf9c8ca052f6e9fn,0x0b090a7560a968e3n,0xabeeddb2dde06ff1n,0x58efc10b06a2068dn,0xc6e57a78fbd986e0n,0x2eab8ca63ce802d7n,0x14a195640116f336n,0x7c0828dd624ec390n,0xd74bbe77e6116ac7n,0x804456af10f5fb53n,0xebe9ea2adf4321c7n,0x03219a39ee587a30n,0x49787fef17af9924n,0xa1e9300cd8520548n,0x5b45e522e4b1b4efn,0xb49c3b3995091a36n,0xd4490ad526f14431n,0x12a8f216af9418c2n,0x001f837cc7350524n,0x1877b51e57a764d5n,0xa2853b80f17f58een,0x993e1de72d36d310n,0xb3598080ce64a656n,0x252f59cf0d9f04bbn,0xd23c8e176d113600n,0x1bda0492e7e4586en,0x21e0bd5026c619bfn,0x3b097adaf088f94en,0x8d14dedb30be846en,0xf95cffa23af5f6f4n,0x3871700761b3f743n,0xca672b91e9e4fa16n,0x64c8e531bff53b55n,0x241260ed4ad1e87dn,0x106c09b972d2e822n,0x7fba195410e5ca30n,0x7884d9bc6cb569d8n,0x0647dfedcd894a29n,0x63573ff03e224774n,0x4fc8e9560f91b123n,0x1db956e450275779n,0xb8d91274b9e9d4fbn,0xa2ebee47e2fbfce1n,0xd9f1f30ccd97fb09n,0xefed53d75fd64e6bn,0x2e6d02c36017f67fn,0xa9aa4d20db084e9bn,0xb64be8d8b25396c1n,0x70cb6af7c2d5bcf0n,0x98f076a4f7a2322en,0xbf84470805e69b5fn,0x94c3251f06f90cf3n,0x3e003e616a6591e9n,0xb925a6cd0421aff3n,0x61bdd1307c66e300n,0xbf8d5108e27e0d48n,0x240ab57a8b888b20n,0xfc87614baf287e07n,0xef02cdd06ffdb432n,0xa1082c0466df6c0an,0x8215e577001332c8n,0xd39bb9c3a48db6cfn,0x2738259634305c14n,0x61cf4f94c97df93dn,0x1b6baca2ae4e125bn,0x758f450c88572e0bn,0x959f587d507a8359n,0xb063e962e045f54dn,0x60e8ed72c0dff5d1n,0x7b64978555326f9fn,0xfd080d236da814ban,0x8c90fd9b083f4558n,0x106f72fe81e2c590n,0x7976033a39f7d952n,0xa4ec0132764ca04bn,0x733ea705fae4fa77n,0xb4d8f77bc3e56167n,0x9e21f4f903b33fd9n,0x9d765e419fb69f6dn,0xd30c088ba61ea5efn,0x5d94337fbfaf7f5bn,0x1a4e4822eb4d7a59n,0x6ffe73e81b637fb3n,0xddf957bc36d8b9can,0x64d0e29eea8838b3n,0x08dd9bdfd96b9f63n,0x087e79e5a57d1d13n,0xe328e230e3e2b3fbn,0x1c2559e30f0946ben,0x720bf5f26f4d2eaan,0xb0774d261cc609dbn,0x443f64ec5a371195n,0x4112cf68649a260en,0xd813f2fab7f5c5can,0x660d3257380841een,0x59ac2c7873f910a3n,0xe846963877671a17n,0x93b633abfa3469f8n,0xc0c0f5a60ef4cdcfn,0xcaf21ecd4377b28cn,0x57277707199b8175n,0x506c11b9d90e8b1dn,0xd83cc2687a19255fn,0x4a29c6465a314cd1n,0xed2df21216235097n,0xb5635c95ff7296e2n,0x22af003ab672e811n,0x52e762596bf68235n,0x9aeba33ac6ecc6b0n,0x944f6de09134dfb6n,0x6c47bec883a7de39n,0x6ad047c430a12104n,0xa5b1cfdba0ab4067n,0x7c45d833aff07862n,0x5092ef950a16da0bn,0x9338e69c052b8e7bn,0x455a4b4cfe30e3f5n,0x6b02e63195ad0cf8n,0x6b17b224bad6bf27n,0xd1e0ccd25bb9c169n,0xde0c89a556b9ae70n,0x50065e535a213cf6n,0x9c1169fa2777b874n,0x78edefd694af1eedn,0x6dc93d9526a50e68n,0xee97f453f06791edn,0x32ab0edb696703d3n,0x3a6853c7e70757a7n,0x31865ced6120f37dn,0x67fef95d92607890n,0x1f2b1d1f15f6dc9cn,0xb69e38a8965c6b65n,0xaa9119ff184cccf4n,0xf43c732873f24c13n,0xfb4a3d794a9a80d2n,0x3550c2321fd6109cn,0x371f77e76bb8417en,0x6bfa9aae5ec05779n,0xcd04f3ff001a4778n,0xe3273522064480can,0x9f91508bffcfc14an,0x049a7f41061a9e60n,0xfcb6be43a9f2fe9bn,0x08de8a1c7797da9bn,0x8f9887e6078735a1n,0xb5b4071dbfc73a66n,0x230e343dfba08d33n,0x43ed7f5a0fae657dn,0x3a88a0fbbcb05c63n,0x21874b8b4d2dbc4fn,0x1bdea12e35f6a8c9n,0x53c065c6c8e63528n,0xe34a1d250e7a8d6bn,0xd6b04d3b7651dd7en,0x5e90277e7cb39e2dn,0x2c046f22062dc67dn,0xb10bb459132d0a26n,0x3fa9ddfb67e2f199n,0x0e09b88e1914f7afn,0x10e8b35af3eeab37n,0x9eedeca8e272b933n,0xd4c718bc4ae8ae5fn,0x81536d601170fc20n,0x91b534f885818a06n,0xec8177f83f900978n,0x190e714fada5156en,0xb592bf39b0364963n,0x89c350c893ae7dc1n,0xac042e70f8b383f2n,0xb49b52e587a1ee60n,0xfb152fe3ff26da89n,0x3e666e6f69ae2c15n,0x3b544ebe544c19f9n,0xe805a1e290cf2456n,0x24b33c9d7ed25117n,0xe74733427b72f0c1n,0x0a804d18b7097475n,0x57e3306d881edb4fn,0x4ae7d6a36eb5dbcbn,0x2d8d5432157064c8n,0xd1e649de1e7f268bn,0x8a328a1cedfe552cn,0x07a3aec79624c7dan,0x84547ddc3e203c94n,0x990a98fd5071d263n,0x1a4ff12616eefc89n,0xf6f7fd1431714200n,0x30c05b1ba332f41cn,0x8d2636b81555a786n,0x46c9feb55d120902n,0xccec0a73b49c9921n,0x4e9d2827355fc492n,0x19ebb029435dcb0fn,0x4659d2b743848a2cn,0x963ef2c96b33be31n,0x74f85198b05a2e7dn,0x5a0f544dd2b1fb18n,0x03727073c2e134b1n,0xc7f6aa2de59aea61n,0x352787baa0d7c22fn,0x9853eab63b5e0b35n,0xabbdcdd7ed5c0860n,0xcf05daf5ac8d77b0n,0x49cad48cebf4a71en,0x7a4c10ec2158c4a6n,0xd9e92aa246bf719en,0x13ae978d09fe5557n,0x730499af921549ffn,0x4e4b705b92903ba4n,0xff577222c14f0a3an,0x55b6344cf97aafaen,0xb862225b055b6960n,0xcac09afbddd2cdb4n,0xdaf8e9829fe96b5fn,0xb5fdfc5d3132c498n,0x310cb380db6f7503n,0xe87fbb46217a360en,0x2102ae466ebb1148n,0xf8549e1a3aa5e00dn,0x07a69afdcc42261an,0xc4c118bfe78feaaen,0xf9f4892ed96bd438n,0x1af3dbe25d8f45dan,0xf5b4b0b0d2deeeb4n,0x962aceefa82e1c84n,0x046e3ecaaf453ce9n,0xf05d129681949a4cn,0x964781ce734b3c84n,0x9c2ed44081ce5fbdn,0x522e23f3925e319en,0x177e00f9fc32f791n,0x2bc60a63a6f3b3f2n,0x222bbfae61725606n,0x486289ddcc3d6780n,0x7dc7785b8efdfc80n,0x8af38731c02ba980n,0x1fab64ea29a2ddf7n,0xe4d9429322cd065an,0x9da058c67844f20cn,0x24c0e332b70019b0n,0x233003b5a6cfe6adn,0xd586bd01c5c217f6n,0x5e5637885f29bc2bn,0x7eba726d8c94094bn,0x0a56a5f0bfe39272n,0xd79476a84ee20d06n,0x9e4c1269baa4bf37n,0x17efee45b0dee640n,0x1d95b0a5fcf90bc6n,0x93cbe0b699c2585dn,0x65fa4f227a2b6d79n,0xd5f9e858292504d5n,0xc2b5a03f71471a6fn,0x59300222b4561e00n,0xce2f8642ca0712dcn,0x7ca9723fbb2e8988n,0x2785338347f2ba08n,0xc61bb3a141e50e8cn,0x150f361dab9dec26n,0x9f6a419d382595f4n,0x64a53dc924fe7ac9n,0x142de49fff7a7c3dn,0x0c335248857fa9e7n,0x0a9c32d5eae45305n,0xe6c42178c4bbb92en,0x71f1ce2490d20b07n,0xf1bcc3d275afe51an,0xe728e8c83c334074n,0x96fbf83a12884624n,0x81a1549fd6573da5n,0x5fa7867caf35e149n,0x56986e2ef3ed091bn,0x917f1dd5f8886c61n,0xd20d8c88c8ffe65fn,0x31d71dce64b2c310n,0xf165b587df898190n,0xa57e6339dd2cf3a0n,0x1ef6e6dbb1961ec9n,0x70cc73d90bc26e24n,0xe21a6b35df0c3ad7n,0x003a93d8b2806962n,0x1c99ded33cb890a1n,0xcf3145de0add4289n,0xd0e4427a5514fb72n,0x77c621cc9fb3a483n,0x67a34dac4356550bn,0xf8d626aaaf278509n],r=t(521);new class{constructor(){this.openingBook=null,this.engine=new i,this.options={isChess960:!1,hashSize:32},this.interface=r.createInterface({input:process.stdin,output:process.stdout,terminal:!1}),this.interface.on("line",(e=>{const s=e.split(" ")[0];switch(s){case"uci":console.log(`id name ${this.engine.name} ${this.engine.version}`),console.log(`id author ${this.engine.author}`),console.log("option name Hash type spin default 32 min 1 max 512"),console.log("option name UCI_Chess960 type check default false"),console.log("uciok");break;case"isready":console.log("readyok");break;case"quit":process.exit();break;case"ucinewgame":{this.engine=new i,this.engine.isChess960=this.options.isChess960,this.engine.SetTransTableSize(this.options.hashSize);const e=(new h).TryLoad();e&&(this.openingBook=e);break}case"position":this.engine.ParseUCIPosition(e);break;case"go":if(this.openingBook){const e=h.PolyglotHash(this.engine.Position),s=this.openingBook.get(e);if(void 0!==s)return void console.log(`bestmove ${s.move}`)}this.engine.ParseUCIGo(e);break;case"setoption":try{const s=e.match(/name (\w+)/);if(!s)return void console.error("Unable to parse option name");switch(s[1]){case"Hash":{const s=parseInt((e.match(/value (\d+)/)||[])[1])||0;s&&(this.options.hashSize=s,this.engine.SetTransTableSize(s));break}case"UCI_Chess960":{const s=e.match(/value (\w+)/);if(!s)return void console.error("Unable to parse value");this.options.isChess960="true"===s[1],this.engine.isChess960=this.options.isChess960;break}default:console.log(`Unrecognized option: ${s[1]}`)}}catch{console.log("Error parsing option")}break;default:console.log(`Unrecognized command: ${s}`)}}))}}})()})();
